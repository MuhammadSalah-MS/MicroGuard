
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002760  000027f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800178  00800178  0000290c  2**0
                  ALLOC
  3 .stab         000027cc  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001679  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006751  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000068f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 ae 13 	jmp	0x275c	; 0x275c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 83 13 	jmp	0x2706	; 0x2706 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
Timer1_ConfigType TIMER1_Configurations = {TIMER1_INITIAL_VALUE,TIMER1_COMPARE_VALUE,CLK256,TIMER_MODE_CTC};



int main()
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	cf 56       	subi	r28, 0x6F	; 111
     e02:	d0 40       	sbci	r29, 0x00	; 0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61

	SET_BIT(SREG,7); /* Enable Global Interrupts */
     e0e:	af e5       	ldi	r26, 0x5F	; 95
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ef e5       	ldi	r30, 0x5F	; 95
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	8c 93       	st	X, r24

	/* Drivers Configurations & Initialization */
	/* Create configuration structure for TWI (I2C) driver */
	TWI_ConfigType TWI_Configurations = {0b00000010, 0x02, prescaler_1};
     e1c:	ce 01       	movw	r24, r28
     e1e:	82 5b       	subi	r24, 0xB2	; 178
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	a8 96       	adiw	r28, 0x28	; 40
     e24:	9f af       	std	Y+63, r25	; 0x3f
     e26:	8e af       	std	Y+62, r24	; 0x3e
     e28:	a8 97       	sbiw	r28, 0x28	; 40
     e2a:	85 e7       	ldi	r24, 0x75	; 117
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	aa 96       	adiw	r28, 0x2a	; 42
     e30:	9f af       	std	Y+63, r25	; 0x3f
     e32:	8e af       	std	Y+62, r24	; 0x3e
     e34:	aa 97       	sbiw	r28, 0x2a	; 42
     e36:	93 e0       	ldi	r25, 0x03	; 3
     e38:	ab 96       	adiw	r28, 0x2b	; 43
     e3a:	9f af       	std	Y+63, r25	; 0x3f
     e3c:	ab 97       	sbiw	r28, 0x2b	; 43
     e3e:	aa 96       	adiw	r28, 0x2a	; 42
     e40:	ee ad       	ldd	r30, Y+62	; 0x3e
     e42:	ff ad       	ldd	r31, Y+63	; 0x3f
     e44:	aa 97       	sbiw	r28, 0x2a	; 42
     e46:	00 80       	ld	r0, Z
     e48:	aa 96       	adiw	r28, 0x2a	; 42
     e4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e4e:	aa 97       	sbiw	r28, 0x2a	; 42
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	aa 96       	adiw	r28, 0x2a	; 42
     e54:	9f af       	std	Y+63, r25	; 0x3f
     e56:	8e af       	std	Y+62, r24	; 0x3e
     e58:	aa 97       	sbiw	r28, 0x2a	; 42
     e5a:	a8 96       	adiw	r28, 0x28	; 40
     e5c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e5e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e60:	a8 97       	sbiw	r28, 0x28	; 40
     e62:	00 82       	st	Z, r0
     e64:	a8 96       	adiw	r28, 0x28	; 40
     e66:	8e ad       	ldd	r24, Y+62	; 0x3e
     e68:	9f ad       	ldd	r25, Y+63	; 0x3f
     e6a:	a8 97       	sbiw	r28, 0x28	; 40
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	a8 96       	adiw	r28, 0x28	; 40
     e70:	9f af       	std	Y+63, r25	; 0x3f
     e72:	8e af       	std	Y+62, r24	; 0x3e
     e74:	a8 97       	sbiw	r28, 0x28	; 40
     e76:	ab 96       	adiw	r28, 0x2b	; 43
     e78:	9f ad       	ldd	r25, Y+63	; 0x3f
     e7a:	ab 97       	sbiw	r28, 0x2b	; 43
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	ab 96       	adiw	r28, 0x2b	; 43
     e80:	9f af       	std	Y+63, r25	; 0x3f
     e82:	ab 97       	sbiw	r28, 0x2b	; 43
     e84:	ab 96       	adiw	r28, 0x2b	; 43
     e86:	ef ad       	ldd	r30, Y+63	; 0x3f
     e88:	ab 97       	sbiw	r28, 0x2b	; 43
     e8a:	ee 23       	and	r30, r30
     e8c:	c1 f6       	brne	.-80     	; 0xe3e <main+0x46>
	TWI_init(&TWI_Configurations);
     e8e:	ce 01       	movw	r24, r28
     e90:	82 5b       	subi	r24, 0xB2	; 178
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	0e 94 69 11 	call	0x22d2	; 0x22d2 <TWI_init>
	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Configurations = {EIGTH_BITS, PARITRY_DISABLED, STOP_ONEBIT, BAUD_9600 };
     e98:	ce 01       	movw	r24, r28
     e9a:	8f 5a       	subi	r24, 0xAF	; 175
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	ad 96       	adiw	r28, 0x2d	; 45
     ea0:	9f af       	std	Y+63, r25	; 0x3f
     ea2:	8e af       	std	Y+62, r24	; 0x3e
     ea4:	ad 97       	sbiw	r28, 0x2d	; 45
     ea6:	8e e6       	ldi	r24, 0x6E	; 110
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	af 96       	adiw	r28, 0x2f	; 47
     eac:	9f af       	std	Y+63, r25	; 0x3f
     eae:	8e af       	std	Y+62, r24	; 0x3e
     eb0:	af 97       	sbiw	r28, 0x2f	; 47
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	e0 96       	adiw	r28, 0x30	; 48
     eb6:	9f af       	std	Y+63, r25	; 0x3f
     eb8:	e0 97       	sbiw	r28, 0x30	; 48
     eba:	af 96       	adiw	r28, 0x2f	; 47
     ebc:	ee ad       	ldd	r30, Y+62	; 0x3e
     ebe:	ff ad       	ldd	r31, Y+63	; 0x3f
     ec0:	af 97       	sbiw	r28, 0x2f	; 47
     ec2:	00 80       	ld	r0, Z
     ec4:	af 96       	adiw	r28, 0x2f	; 47
     ec6:	8e ad       	ldd	r24, Y+62	; 0x3e
     ec8:	9f ad       	ldd	r25, Y+63	; 0x3f
     eca:	af 97       	sbiw	r28, 0x2f	; 47
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	af 96       	adiw	r28, 0x2f	; 47
     ed0:	9f af       	std	Y+63, r25	; 0x3f
     ed2:	8e af       	std	Y+62, r24	; 0x3e
     ed4:	af 97       	sbiw	r28, 0x2f	; 47
     ed6:	ad 96       	adiw	r28, 0x2d	; 45
     ed8:	ee ad       	ldd	r30, Y+62	; 0x3e
     eda:	ff ad       	ldd	r31, Y+63	; 0x3f
     edc:	ad 97       	sbiw	r28, 0x2d	; 45
     ede:	00 82       	st	Z, r0
     ee0:	ad 96       	adiw	r28, 0x2d	; 45
     ee2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee6:	ad 97       	sbiw	r28, 0x2d	; 45
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	9f af       	std	Y+63, r25	; 0x3f
     eee:	8e af       	std	Y+62, r24	; 0x3e
     ef0:	ad 97       	sbiw	r28, 0x2d	; 45
     ef2:	e0 96       	adiw	r28, 0x30	; 48
     ef4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef6:	e0 97       	sbiw	r28, 0x30	; 48
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	e0 96       	adiw	r28, 0x30	; 48
     efc:	9f af       	std	Y+63, r25	; 0x3f
     efe:	e0 97       	sbiw	r28, 0x30	; 48
     f00:	e0 96       	adiw	r28, 0x30	; 48
     f02:	ef ad       	ldd	r30, Y+63	; 0x3f
     f04:	e0 97       	sbiw	r28, 0x30	; 48
     f06:	ee 23       	and	r30, r30
     f08:	c1 f6       	brne	.-80     	; 0xeba <main+0xc2>
	UART_init(&UART_Configurations);
     f0a:	ce 01       	movw	r24, r28
     f0c:	8f 5a       	subi	r24, 0xAF	; 175
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	0e 94 00 12 	call	0x2400	; 0x2400 <UART_init>
	/* Set the Call back function pointer in the Timer driver for Interrupts handler */
	Timer1_setCallBack(tickscalc);
     f14:	87 e5       	ldi	r24, 0x57	; 87
     f16:	9b e0       	ldi	r25, 0x0B	; 11
     f18:	0e 94 57 11 	call	0x22ae	; 0x22ae <Timer1_setCallBack>
	DcMotor_Init();
     f1c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <DcMotor_Init>
	Buzzer_init();
     f20:	0e 94 80 0b 	call	0x1700	; 0x1700 <Buzzer_init>
	/* Local Variables Declarations */
	uint8 first_password[6];
	uint8 second_password[6];
	uint8 flag=0;
     f24:	fe 01       	movw	r30, r28
     f26:	e3 5b       	subi	r30, 0xB3	; 179
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	10 82       	st	Z, r1

	while (1)
	{
		uint8 state=UART_recieveByte();
     f2c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <UART_recieveByte>
     f30:	fe 01       	movw	r30, r28
     f32:	e4 5b       	subi	r30, 0xB4	; 180
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 83       	st	Z, r24
		flag=0;
     f38:	fe 01       	movw	r30, r28
     f3a:	e3 5b       	subi	r30, 0xB3	; 179
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	10 82       	st	Z, r1
		if (state==CREATE_PASS) /* Set password for first time */
     f40:	fe 01       	movw	r30, r28
     f42:	e4 5b       	subi	r30, 0xB4	; 180
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	81 34       	cpi	r24, 0x41	; 65
     f4a:	09 f0       	breq	.+2      	; 0xf4e <main+0x156>
     f4c:	b4 c1       	rjmp	.+872    	; 0x12b6 <main+0x4be>
		{
			UART_receiveString(first_password); /* Receive Password */
     f4e:	ce 01       	movw	r24, r28
     f50:	88 5a       	subi	r24, 0xA8	; 168
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	0e 94 12 13 	call	0x2624	; 0x2624 <UART_receiveString>
     f58:	fe 01       	movw	r30, r28
     f5a:	ff 96       	adiw	r30, 0x3f	; 63
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a0 e2       	ldi	r26, 0x20	; 32
     f62:	b1 e4       	ldi	r27, 0x41	; 65
     f64:	80 83       	st	Z, r24
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	a2 83       	std	Z+2, r26	; 0x02
     f6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f6c:	fe 01       	movw	r30, r28
     f6e:	ff 96       	adiw	r30, 0x3f	; 63
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	82 81       	ldd	r24, Z+2	; 0x02
     f76:	93 81       	ldd	r25, Z+3	; 0x03
     f78:	2b ea       	ldi	r18, 0xAB	; 171
     f7a:	3a ea       	ldi	r19, 0xAA	; 170
     f7c:	4a e2       	ldi	r20, 0x2A	; 42
     f7e:	50 e4       	ldi	r21, 0x40	; 64
     f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	8b af       	std	Y+59, r24	; 0x3b
     f8a:	9c af       	std	Y+60, r25	; 0x3c
     f8c:	ad af       	std	Y+61, r26	; 0x3d
     f8e:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     f90:	6b ad       	ldd	r22, Y+59	; 0x3b
     f92:	7c ad       	ldd	r23, Y+60	; 0x3c
     f94:	8d ad       	ldd	r24, Y+61	; 0x3d
     f96:	9e ad       	ldd	r25, Y+62	; 0x3e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e8       	ldi	r20, 0x80	; 128
     f9e:	5f e3       	ldi	r21, 0x3F	; 63
     fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	1c f4       	brge	.+6      	; 0xfae <main+0x1b6>
		__ticks = 1;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	8a af       	std	Y+58, r24	; 0x3a
     fac:	93 c0       	rjmp	.+294    	; 0x10d4 <main+0x2dc>
	else if (__tmp > 255)
     fae:	6b ad       	ldd	r22, Y+59	; 0x3b
     fb0:	7c ad       	ldd	r23, Y+60	; 0x3c
     fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4f e7       	ldi	r20, 0x7F	; 127
     fbc:	53 e4       	ldi	r21, 0x43	; 67
     fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fc2:	18 16       	cp	r1, r24
     fc4:	0c f0       	brlt	.+2      	; 0xfc8 <main+0x1d0>
     fc6:	7d c0       	rjmp	.+250    	; 0x10c2 <main+0x2ca>
	{
		_delay_ms(__us / 1000.0);
     fc8:	fe 01       	movw	r30, r28
     fca:	ff 96       	adiw	r30, 0x3f	; 63
     fcc:	60 81       	ld	r22, Z
     fce:	71 81       	ldd	r23, Z+1	; 0x01
     fd0:	82 81       	ldd	r24, Z+2	; 0x02
     fd2:	93 81       	ldd	r25, Z+3	; 0x03
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	4a e7       	ldi	r20, 0x7A	; 122
     fda:	54 e4       	ldi	r21, 0x44	; 68
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	8e ab       	std	Y+54, r24	; 0x36
     fe6:	9f ab       	std	Y+55, r25	; 0x37
     fe8:	a8 af       	std	Y+56, r26	; 0x38
     fea:	b9 af       	std	Y+57, r27	; 0x39
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fec:	6e a9       	ldd	r22, Y+54	; 0x36
     fee:	7f a9       	ldd	r23, Y+55	; 0x37
     ff0:	88 ad       	ldd	r24, Y+56	; 0x38
     ff2:	99 ad       	ldd	r25, Y+57	; 0x39
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	4a ef       	ldi	r20, 0xFA	; 250
     ffa:	54 e4       	ldi	r21, 0x44	; 68
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	8a ab       	std	Y+50, r24	; 0x32
    1006:	9b ab       	std	Y+51, r25	; 0x33
    1008:	ac ab       	std	Y+52, r26	; 0x34
    100a:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    100c:	6a a9       	ldd	r22, Y+50	; 0x32
    100e:	7b a9       	ldd	r23, Y+51	; 0x33
    1010:	8c a9       	ldd	r24, Y+52	; 0x34
    1012:	9d a9       	ldd	r25, Y+53	; 0x35
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e8       	ldi	r20, 0x80	; 128
    101a:	5f e3       	ldi	r21, 0x3F	; 63
    101c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1020:	88 23       	and	r24, r24
    1022:	2c f4       	brge	.+10     	; 0x102e <main+0x236>
		__ticks = 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	99 ab       	std	Y+49, r25	; 0x31
    102a:	88 ab       	std	Y+48, r24	; 0x30
    102c:	3f c0       	rjmp	.+126    	; 0x10ac <main+0x2b4>
	else if (__tmp > 65535)
    102e:	6a a9       	ldd	r22, Y+50	; 0x32
    1030:	7b a9       	ldd	r23, Y+51	; 0x33
    1032:	8c a9       	ldd	r24, Y+52	; 0x34
    1034:	9d a9       	ldd	r25, Y+53	; 0x35
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	3f ef       	ldi	r19, 0xFF	; 255
    103a:	4f e7       	ldi	r20, 0x7F	; 127
    103c:	57 e4       	ldi	r21, 0x47	; 71
    103e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1042:	18 16       	cp	r1, r24
    1044:	4c f5       	brge	.+82     	; 0x1098 <main+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1046:	6e a9       	ldd	r22, Y+54	; 0x36
    1048:	7f a9       	ldd	r23, Y+55	; 0x37
    104a:	88 ad       	ldd	r24, Y+56	; 0x38
    104c:	99 ad       	ldd	r25, Y+57	; 0x39
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e2       	ldi	r20, 0x20	; 32
    1054:	51 e4       	ldi	r21, 0x41	; 65
    1056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	99 ab       	std	Y+49, r25	; 0x31
    106c:	88 ab       	std	Y+48, r24	; 0x30
    106e:	0f c0       	rjmp	.+30     	; 0x108e <main+0x296>
    1070:	88 ec       	ldi	r24, 0xC8	; 200
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9f a7       	std	Y+47, r25	; 0x2f
    1076:	8e a7       	std	Y+46, r24	; 0x2e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1078:	8e a5       	ldd	r24, Y+46	; 0x2e
    107a:	9f a5       	ldd	r25, Y+47	; 0x2f
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <main+0x284>
    1080:	9f a7       	std	Y+47, r25	; 0x2f
    1082:	8e a7       	std	Y+46, r24	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1084:	88 a9       	ldd	r24, Y+48	; 0x30
    1086:	99 a9       	ldd	r25, Y+49	; 0x31
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	99 ab       	std	Y+49, r25	; 0x31
    108c:	88 ab       	std	Y+48, r24	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108e:	88 a9       	ldd	r24, Y+48	; 0x30
    1090:	99 a9       	ldd	r25, Y+49	; 0x31
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	69 f7       	brne	.-38     	; 0x1070 <main+0x278>
    1096:	24 c0       	rjmp	.+72     	; 0x10e0 <main+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1098:	6a a9       	ldd	r22, Y+50	; 0x32
    109a:	7b a9       	ldd	r23, Y+51	; 0x33
    109c:	8c a9       	ldd	r24, Y+52	; 0x34
    109e:	9d a9       	ldd	r25, Y+53	; 0x35
    10a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	99 ab       	std	Y+49, r25	; 0x31
    10aa:	88 ab       	std	Y+48, r24	; 0x30
    10ac:	88 a9       	ldd	r24, Y+48	; 0x30
    10ae:	99 a9       	ldd	r25, Y+49	; 0x31
    10b0:	9d a7       	std	Y+45, r25	; 0x2d
    10b2:	8c a7       	std	Y+44, r24	; 0x2c
    10b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    10b6:	9d a5       	ldd	r25, Y+45	; 0x2d
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <main+0x2c0>
    10bc:	9d a7       	std	Y+45, r25	; 0x2d
    10be:	8c a7       	std	Y+44, r24	; 0x2c
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <main+0x2e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10c2:	6b ad       	ldd	r22, Y+59	; 0x3b
    10c4:	7c ad       	ldd	r23, Y+60	; 0x3c
    10c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    10c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8a af       	std	Y+58, r24	; 0x3a
    10d4:	8a ad       	ldd	r24, Y+58	; 0x3a
    10d6:	8b a7       	std	Y+43, r24	; 0x2b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10da:	8a 95       	dec	r24
    10dc:	f1 f7       	brne	.-4      	; 0x10da <main+0x2e2>
    10de:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_us(10);
			UART_receiveString(second_password); /* Receive it again for checking */
    10e0:	ce 01       	movw	r24, r28
    10e2:	82 5a       	subi	r24, 0xA2	; 162
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	0e 94 12 13 	call	0x2624	; 0x2624 <UART_receiveString>

			for (uint8 i=0;i<5;i++)
    10ea:	fe 01       	movw	r30, r28
    10ec:	e5 5b       	subi	r30, 0xB5	; 181
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	10 82       	st	Z, r1
    10f2:	2e c0       	rjmp	.+92     	; 0x1150 <main+0x358>
			{
				if (first_password[i]!=second_password[i])
    10f4:	fe 01       	movw	r30, r28
    10f6:	e5 5b       	subi	r30, 0xB5	; 181
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	ce 01       	movw	r24, r28
    1102:	88 5a       	subi	r24, 0xA8	; 168
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	fc 01       	movw	r30, r24
    1108:	e2 0f       	add	r30, r18
    110a:	f3 1f       	adc	r31, r19
    110c:	40 81       	ld	r20, Z
    110e:	fe 01       	movw	r30, r28
    1110:	e5 5b       	subi	r30, 0xB5	; 181
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	ce 01       	movw	r24, r28
    111c:	82 5a       	subi	r24, 0xA2	; 162
    111e:	9f 4f       	sbci	r25, 0xFF	; 255
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	80 81       	ld	r24, Z
    1128:	48 17       	cp	r20, r24
    112a:	49 f0       	breq	.+18     	; 0x113e <main+0x346>
				{
					flag=1;
    112c:	fe 01       	movw	r30, r28
    112e:	e3 5b       	subi	r30, 0xB3	; 179
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 83       	st	Z, r24
					UART_sendByte(A_ERROR);
    1136:	8a e5       	ldi	r24, 0x5A	; 90
    1138:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    113c:	0f c0       	rjmp	.+30     	; 0x115c <main+0x364>
		{
			UART_receiveString(first_password); /* Receive Password */
			_delay_us(10);
			UART_receiveString(second_password); /* Receive it again for checking */

			for (uint8 i=0;i<5;i++)
    113e:	de 01       	movw	r26, r28
    1140:	a5 5b       	subi	r26, 0xB5	; 181
    1142:	bf 4f       	sbci	r27, 0xFF	; 255
    1144:	fe 01       	movw	r30, r28
    1146:	e5 5b       	subi	r30, 0xB5	; 181
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	80 81       	ld	r24, Z
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	8c 93       	st	X, r24
    1150:	fe 01       	movw	r30, r28
    1152:	e5 5b       	subi	r30, 0xB5	; 181
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	80 81       	ld	r24, Z
    1158:	85 30       	cpi	r24, 0x05	; 5
    115a:	60 f2       	brcs	.-104    	; 0x10f4 <main+0x2fc>
					UART_sendByte(A_ERROR);
					break;
				}
			}

			if (!flag) /* No Difference in two passwords */
    115c:	fe 01       	movw	r30, r28
    115e:	e3 5b       	subi	r30, 0xB3	; 179
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <main+0x372>
    1168:	e1 ce       	rjmp	.-574    	; 0xf2c <main+0x134>
			{
				for (int i=0;i<5;i++)
    116a:	fe 01       	movw	r30, r28
    116c:	e7 5b       	subi	r30, 0xB7	; 183
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	11 82       	std	Z+1, r1	; 0x01
    1172:	10 82       	st	Z, r1
    1174:	93 c0       	rjmp	.+294    	; 0x129c <main+0x4a4>
				{
					EEPROM_writeByte(0x0000+i,first_password[i]);
    1176:	fe 01       	movw	r30, r28
    1178:	e7 5b       	subi	r30, 0xB7	; 183
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	40 81       	ld	r20, Z
    117e:	51 81       	ldd	r21, Z+1	; 0x01
    1180:	fe 01       	movw	r30, r28
    1182:	e7 5b       	subi	r30, 0xB7	; 183
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	20 81       	ld	r18, Z
    1188:	31 81       	ldd	r19, Z+1	; 0x01
    118a:	ce 01       	movw	r24, r28
    118c:	88 5a       	subi	r24, 0xA8	; 168
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	fc 01       	movw	r30, r24
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	20 81       	ld	r18, Z
    1198:	ca 01       	movw	r24, r20
    119a:	62 2f       	mov	r22, r18
    119c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <EEPROM_writeByte>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 e2       	ldi	r26, 0x20	; 32
    11a6:	b1 e4       	ldi	r27, 0x41	; 65
    11a8:	8f a3       	std	Y+39, r24	; 0x27
    11aa:	98 a7       	std	Y+40, r25	; 0x28
    11ac:	a9 a7       	std	Y+41, r26	; 0x29
    11ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b0:	6f a1       	ldd	r22, Y+39	; 0x27
    11b2:	78 a5       	ldd	r23, Y+40	; 0x28
    11b4:	89 a5       	ldd	r24, Y+41	; 0x29
    11b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	4a ef       	ldi	r20, 0xFA	; 250
    11be:	54 e4       	ldi	r21, 0x44	; 68
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	8b a3       	std	Y+35, r24	; 0x23
    11ca:	9c a3       	std	Y+36, r25	; 0x24
    11cc:	ad a3       	std	Y+37, r26	; 0x25
    11ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11d0:	6b a1       	ldd	r22, Y+35	; 0x23
    11d2:	7c a1       	ldd	r23, Y+36	; 0x24
    11d4:	8d a1       	ldd	r24, Y+37	; 0x25
    11d6:	9e a1       	ldd	r25, Y+38	; 0x26
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e8       	ldi	r20, 0x80	; 128
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <main+0x3fa>
		__ticks = 1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	9a a3       	std	Y+34, r25	; 0x22
    11ee:	89 a3       	std	Y+33, r24	; 0x21
    11f0:	3f c0       	rjmp	.+126    	; 0x1270 <main+0x478>
	else if (__tmp > 65535)
    11f2:	6b a1       	ldd	r22, Y+35	; 0x23
    11f4:	7c a1       	ldd	r23, Y+36	; 0x24
    11f6:	8d a1       	ldd	r24, Y+37	; 0x25
    11f8:	9e a1       	ldd	r25, Y+38	; 0x26
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	3f ef       	ldi	r19, 0xFF	; 255
    11fe:	4f e7       	ldi	r20, 0x7F	; 127
    1200:	57 e4       	ldi	r21, 0x47	; 71
    1202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1206:	18 16       	cp	r1, r24
    1208:	4c f5       	brge	.+82     	; 0x125c <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120a:	6f a1       	ldd	r22, Y+39	; 0x27
    120c:	78 a5       	ldd	r23, Y+40	; 0x28
    120e:	89 a5       	ldd	r24, Y+41	; 0x29
    1210:	9a a5       	ldd	r25, Y+42	; 0x2a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e2       	ldi	r20, 0x20	; 32
    1218:	51 e4       	ldi	r21, 0x41	; 65
    121a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121e:	dc 01       	movw	r26, r24
    1220:	cb 01       	movw	r24, r22
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9a a3       	std	Y+34, r25	; 0x22
    1230:	89 a3       	std	Y+33, r24	; 0x21
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <main+0x45a>
    1234:	88 ec       	ldi	r24, 0xC8	; 200
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	98 a3       	std	Y+32, r25	; 0x20
    123a:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    123c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    123e:	98 a1       	ldd	r25, Y+32	; 0x20
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <main+0x448>
    1244:	98 a3       	std	Y+32, r25	; 0x20
    1246:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1248:	89 a1       	ldd	r24, Y+33	; 0x21
    124a:	9a a1       	ldd	r25, Y+34	; 0x22
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	9a a3       	std	Y+34, r25	; 0x22
    1250:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	89 a1       	ldd	r24, Y+33	; 0x21
    1254:	9a a1       	ldd	r25, Y+34	; 0x22
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	69 f7       	brne	.-38     	; 0x1234 <main+0x43c>
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <main+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125c:	6b a1       	ldd	r22, Y+35	; 0x23
    125e:	7c a1       	ldd	r23, Y+36	; 0x24
    1260:	8d a1       	ldd	r24, Y+37	; 0x25
    1262:	9e a1       	ldd	r25, Y+38	; 0x26
    1264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	9a a3       	std	Y+34, r25	; 0x22
    126e:	89 a3       	std	Y+33, r24	; 0x21
    1270:	89 a1       	ldd	r24, Y+33	; 0x21
    1272:	9a a1       	ldd	r25, Y+34	; 0x22
    1274:	9e 8f       	std	Y+30, r25	; 0x1e
    1276:	8d 8f       	std	Y+29, r24	; 0x1d
    1278:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <main+0x484>
    1280:	9e 8f       	std	Y+30, r25	; 0x1e
    1282:	8d 8f       	std	Y+29, r24	; 0x1d
				}
			}

			if (!flag) /* No Difference in two passwords */
			{
				for (int i=0;i<5;i++)
    1284:	de 01       	movw	r26, r28
    1286:	a7 5b       	subi	r26, 0xB7	; 183
    1288:	bf 4f       	sbci	r27, 0xFF	; 255
    128a:	fe 01       	movw	r30, r28
    128c:	e7 5b       	subi	r30, 0xB7	; 183
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	11 96       	adiw	r26, 0x01	; 1
    1298:	9c 93       	st	X, r25
    129a:	8e 93       	st	-X, r24
    129c:	fe 01       	movw	r30, r28
    129e:	e7 5b       	subi	r30, 0xB7	; 183
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	85 30       	cpi	r24, 0x05	; 5
    12a8:	91 05       	cpc	r25, r1
    12aa:	0c f4       	brge	.+2      	; 0x12ae <main+0x4b6>
    12ac:	64 cf       	rjmp	.-312    	; 0x1176 <main+0x37e>
				{
					EEPROM_writeByte(0x0000+i,first_password[i]);
					_delay_ms(10);

				}
				UART_sendByte(PASS_CREATED);
    12ae:	81 e4       	ldi	r24, 0x41	; 65
    12b0:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    12b4:	3b ce       	rjmp	.-906    	; 0xf2c <main+0x134>
			}
		}

		else if (state==CHECK_PASS) /* Password Check with the one in EEprom */
    12b6:	fe 01       	movw	r30, r28
    12b8:	e4 5b       	subi	r30, 0xB4	; 180
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	82 34       	cpi	r24, 0x42	; 66
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <main+0x4cc>
    12c2:	cb c0       	rjmp	.+406    	; 0x145a <main+0x662>
		{
			UART_receiveString(first_password);
    12c4:	ce 01       	movw	r24, r28
    12c6:	88 5a       	subi	r24, 0xA8	; 168
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	0e 94 12 13 	call	0x2624	; 0x2624 <UART_receiveString>
			uint8 br_flag=0;
    12ce:	fe 01       	movw	r30, r28
    12d0:	e8 5b       	subi	r30, 0xB8	; 184
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	10 82       	st	Z, r1

			uint8 val=0;
    12d6:	fe 01       	movw	r30, r28
    12d8:	ec 59       	subi	r30, 0x9C	; 156
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	10 82       	st	Z, r1
			for (int i=0;i<5;i++)
    12de:	fe 01       	movw	r30, r28
    12e0:	ea 5b       	subi	r30, 0xBA	; 186
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	11 82       	std	Z+1, r1	; 0x01
    12e6:	10 82       	st	Z, r1
    12e8:	a4 c0       	rjmp	.+328    	; 0x1432 <main+0x63a>
			{

				EEPROM_readByte(0x0000+i, &val);  /* Read 0x0F from the external EEPROM */
    12ea:	fe 01       	movw	r30, r28
    12ec:	ea 5b       	subi	r30, 0xBA	; 186
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 81       	ld	r24, Z
    12f2:	91 81       	ldd	r25, Z+1	; 0x01
    12f4:	9e 01       	movw	r18, r28
    12f6:	2c 59       	subi	r18, 0x9C	; 156
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	b9 01       	movw	r22, r18
    12fc:	0e 94 3d 0c 	call	0x187a	; 0x187a <EEPROM_readByte>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e2       	ldi	r26, 0x20	; 32
    1306:	b1 e4       	ldi	r27, 0x41	; 65
    1308:	89 8f       	std	Y+25, r24	; 0x19
    130a:	9a 8f       	std	Y+26, r25	; 0x1a
    130c:	ab 8f       	std	Y+27, r26	; 0x1b
    130e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	69 8d       	ldd	r22, Y+25	; 0x19
    1312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4a ef       	ldi	r20, 0xFA	; 250
    131e:	54 e4       	ldi	r21, 0x44	; 68
    1320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	8d 8b       	std	Y+21, r24	; 0x15
    132a:	9e 8b       	std	Y+22, r25	; 0x16
    132c:	af 8b       	std	Y+23, r26	; 0x17
    132e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1330:	6d 89       	ldd	r22, Y+21	; 0x15
    1332:	7e 89       	ldd	r23, Y+22	; 0x16
    1334:	8f 89       	ldd	r24, Y+23	; 0x17
    1336:	98 8d       	ldd	r25, Y+24	; 0x18
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	2c f4       	brge	.+10     	; 0x1352 <main+0x55a>
		__ticks = 1;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9c 8b       	std	Y+20, r25	; 0x14
    134e:	8b 8b       	std	Y+19, r24	; 0x13
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <main+0x5d8>
	else if (__tmp > 65535)
    1352:	6d 89       	ldd	r22, Y+21	; 0x15
    1354:	7e 89       	ldd	r23, Y+22	; 0x16
    1356:	8f 89       	ldd	r24, Y+23	; 0x17
    1358:	98 8d       	ldd	r25, Y+24	; 0x18
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	3f ef       	ldi	r19, 0xFF	; 255
    135e:	4f e7       	ldi	r20, 0x7F	; 127
    1360:	57 e4       	ldi	r21, 0x47	; 71
    1362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1366:	18 16       	cp	r1, r24
    1368:	4c f5       	brge	.+82     	; 0x13bc <main+0x5c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136a:	69 8d       	ldd	r22, Y+25	; 0x19
    136c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    136e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e2       	ldi	r20, 0x20	; 32
    1378:	51 e4       	ldi	r21, 0x41	; 65
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	bc 01       	movw	r22, r24
    1384:	cd 01       	movw	r24, r26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9c 8b       	std	Y+20, r25	; 0x14
    1390:	8b 8b       	std	Y+19, r24	; 0x13
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <main+0x5ba>
    1394:	88 ec       	ldi	r24, 0xC8	; 200
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9a 8b       	std	Y+18, r25	; 0x12
    139a:	89 8b       	std	Y+17, r24	; 0x11
    139c:	89 89       	ldd	r24, Y+17	; 0x11
    139e:	9a 89       	ldd	r25, Y+18	; 0x12
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <main+0x5a8>
    13a4:	9a 8b       	std	Y+18, r25	; 0x12
    13a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a8:	8b 89       	ldd	r24, Y+19	; 0x13
    13aa:	9c 89       	ldd	r25, Y+20	; 0x14
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9c 8b       	std	Y+20, r25	; 0x14
    13b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	69 f7       	brne	.-38     	; 0x1394 <main+0x59c>
    13ba:	14 c0       	rjmp	.+40     	; 0x13e4 <main+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13bc:	6d 89       	ldd	r22, Y+21	; 0x15
    13be:	7e 89       	ldd	r23, Y+22	; 0x16
    13c0:	8f 89       	ldd	r24, Y+23	; 0x17
    13c2:	98 8d       	ldd	r25, Y+24	; 0x18
    13c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	8b 89       	ldd	r24, Y+19	; 0x13
    13d2:	9c 89       	ldd	r25, Y+20	; 0x14
    13d4:	98 8b       	std	Y+16, r25	; 0x10
    13d6:	8f 87       	std	Y+15, r24	; 0x0f
    13d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13da:	98 89       	ldd	r25, Y+16	; 0x10
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <main+0x5e4>
    13e0:	98 8b       	std	Y+16, r25	; 0x10
    13e2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				if (first_password[i]!=val)
    13e4:	fe 01       	movw	r30, r28
    13e6:	ea 5b       	subi	r30, 0xBA	; 186
    13e8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	ce 01       	movw	r24, r28
    13f0:	88 5a       	subi	r24, 0xA8	; 168
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	fc 01       	movw	r30, r24
    13f6:	e2 0f       	add	r30, r18
    13f8:	f3 1f       	adc	r31, r19
    13fa:	90 81       	ld	r25, Z
    13fc:	fe 01       	movw	r30, r28
    13fe:	ec 59       	subi	r30, 0x9C	; 156
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
    1404:	98 17       	cp	r25, r24
    1406:	49 f0       	breq	.+18     	; 0x141a <main+0x622>
				{
					br_flag=1;
    1408:	fe 01       	movw	r30, r28
    140a:	e8 5b       	subi	r30, 0xB8	; 184
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 83       	st	Z, r24
					UART_sendByte(A_ERROR);
    1412:	8a e5       	ldi	r24, 0x5A	; 90
    1414:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    1418:	15 c0       	rjmp	.+42     	; 0x1444 <main+0x64c>
		{
			UART_receiveString(first_password);
			uint8 br_flag=0;

			uint8 val=0;
			for (int i=0;i<5;i++)
    141a:	de 01       	movw	r26, r28
    141c:	aa 5b       	subi	r26, 0xBA	; 186
    141e:	bf 4f       	sbci	r27, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	ea 5b       	subi	r30, 0xBA	; 186
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	01 96       	adiw	r24, 0x01	; 1
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	fe 01       	movw	r30, r28
    1434:	ea 5b       	subi	r30, 0xBA	; 186
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	85 30       	cpi	r24, 0x05	; 5
    143e:	91 05       	cpc	r25, r1
    1440:	0c f4       	brge	.+2      	; 0x1444 <main+0x64c>
    1442:	53 cf       	rjmp	.-346    	; 0x12ea <main+0x4f2>
					UART_sendByte(A_ERROR);
					break;
				}
			}

			if (!br_flag)
    1444:	fe 01       	movw	r30, r28
    1446:	e8 5b       	subi	r30, 0xB8	; 184
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	09 f0       	breq	.+2      	; 0x1452 <main+0x65a>
    1450:	6d cd       	rjmp	.-1318   	; 0xf2c <main+0x134>
			{
				UART_sendByte(PASS_CHECKED);
    1452:	82 e4       	ldi	r24, 0x42	; 66
    1454:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    1458:	69 cd       	rjmp	.-1326   	; 0xf2c <main+0x134>
			}

		}
		else if (state==UNLOCK_MOTOR) /* Motor Open */
    145a:	fe 01       	movw	r30, r28
    145c:	e4 5b       	subi	r30, 0xB4	; 180
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 81       	ld	r24, Z
    1462:	83 34       	cpi	r24, 0x43	; 67
    1464:	d1 f5       	brne	.+116    	; 0x14da <main+0x6e2>
		{

			Timer1_init(&TIMER1_Configurations);
    1466:	88 e6       	ldi	r24, 0x68	; 104
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Timer1_init>
			UART_sendByte(MOTOR_UNLOCKED);
    146e:	83 e4       	ldi	r24, 0x43	; 67
    1470:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
			ticks=0;
    1474:	10 92 78 01 	sts	0x0178, r1
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <main+0x68a>

			while (ticks<=15)
			{
				DcMotor_Rotate(MOTOR_CW,MOTOR_MAX_SPEED);
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	64 e6       	ldi	r22, 0x64	; 100
    147e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DcMotor_Rotate>

			Timer1_init(&TIMER1_Configurations);
			UART_sendByte(MOTOR_UNLOCKED);
			ticks=0;

			while (ticks<=15)
    1482:	80 91 78 01 	lds	r24, 0x0178
    1486:	80 31       	cpi	r24, 0x10	; 16
    1488:	c0 f3       	brcs	.-16     	; 0x147a <main+0x682>
			{
				DcMotor_Rotate(MOTOR_CW,MOTOR_MAX_SPEED);
			}
			ticks=0;
    148a:	10 92 78 01 	sts	0x0178, r1
			UART_sendByte(MOTOR_OPENED);
    148e:	81 e5       	ldi	r24, 0x51	; 81
    1490:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    1494:	04 c0       	rjmp	.+8      	; 0x149e <main+0x6a6>
			while (ticks<=3)
			{
				DcMotor_Rotate(MOTOR_STOP,0);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DcMotor_Rotate>
			{
				DcMotor_Rotate(MOTOR_CW,MOTOR_MAX_SPEED);
			}
			ticks=0;
			UART_sendByte(MOTOR_OPENED);
			while (ticks<=3)
    149e:	80 91 78 01 	lds	r24, 0x0178
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	c0 f3       	brcs	.-16     	; 0x1496 <main+0x69e>
			{
				DcMotor_Rotate(MOTOR_STOP,0);
			}
			ticks=0;
    14a6:	10 92 78 01 	sts	0x0178, r1
			UART_sendByte(MOTOR_LOCKED);
    14aa:	87 e5       	ldi	r24, 0x57	; 87
    14ac:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <main+0x6c2>
			while (ticks<=15)
			{
				DcMotor_Rotate(MOTOR_ANTI_CW,MOTOR_MAX_SPEED);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	64 e6       	ldi	r22, 0x64	; 100
    14b6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DcMotor_Rotate>
			{
				DcMotor_Rotate(MOTOR_STOP,0);
			}
			ticks=0;
			UART_sendByte(MOTOR_LOCKED);
			while (ticks<=15)
    14ba:	80 91 78 01 	lds	r24, 0x0178
    14be:	80 31       	cpi	r24, 0x10	; 16
    14c0:	c0 f3       	brcs	.-16     	; 0x14b2 <main+0x6ba>
			{
				DcMotor_Rotate(MOTOR_ANTI_CW,MOTOR_MAX_SPEED);
			}
			Timer1_deinit();
    14c2:	0e 94 49 11 	call	0x2292	; 0x2292 <Timer1_deinit>
			ticks=0;
    14c6:	10 92 78 01 	sts	0x0178, r1
			DcMotor_Rotate(MOTOR_STOP,0);
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DcMotor_Rotate>
			UART_sendByte(DOOR_FINISH);
    14d2:	82 e5       	ldi	r24, 0x52	; 82
    14d4:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    14d8:	29 cd       	rjmp	.-1454   	; 0xf2c <main+0x134>
		}

		else if (state==CHANGE_PASSWORD) /* Change password */
    14da:	fe 01       	movw	r30, r28
    14dc:	e4 5b       	subi	r30, 0xB4	; 180
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	84 34       	cpi	r24, 0x44	; 68
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <main+0x6f0>
    14e6:	cf c0       	rjmp	.+414    	; 0x1686 <main+0x88e>
		{
			UART_receiveString(first_password);
    14e8:	ce 01       	movw	r24, r28
    14ea:	88 5a       	subi	r24, 0xA8	; 168
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	0e 94 12 13 	call	0x2624	; 0x2624 <UART_receiveString>
			uint8 br_flag=0;
    14f2:	fe 01       	movw	r30, r28
    14f4:	eb 5b       	subi	r30, 0xBB	; 187
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	10 82       	st	Z, r1

			uint8 val=0;
    14fa:	fe 01       	movw	r30, r28
    14fc:	eb 59       	subi	r30, 0x9B	; 155
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	10 82       	st	Z, r1
			for (int i=0;i<5;i++)
    1502:	fe 01       	movw	r30, r28
    1504:	ed 5b       	subi	r30, 0xBD	; 189
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	11 82       	std	Z+1, r1	; 0x01
    150a:	10 82       	st	Z, r1
    150c:	a4 c0       	rjmp	.+328    	; 0x1656 <main+0x85e>
			{

				EEPROM_readByte(0x0000+i, &val);  /* Read 0x0F from the external EEPROM */
    150e:	fe 01       	movw	r30, r28
    1510:	ed 5b       	subi	r30, 0xBD	; 189
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	91 81       	ldd	r25, Z+1	; 0x01
    1518:	9e 01       	movw	r18, r28
    151a:	2b 59       	subi	r18, 0x9B	; 155
    151c:	3f 4f       	sbci	r19, 0xFF	; 255
    151e:	b9 01       	movw	r22, r18
    1520:	0e 94 3d 0c 	call	0x187a	; 0x187a <EEPROM_readByte>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e2       	ldi	r26, 0x20	; 32
    152a:	b1 e4       	ldi	r27, 0x41	; 65
    152c:	8b 87       	std	Y+11, r24	; 0x0b
    152e:	9c 87       	std	Y+12, r25	; 0x0c
    1530:	ad 87       	std	Y+13, r26	; 0x0d
    1532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8f 83       	std	Y+7, r24	; 0x07
    154e:	98 87       	std	Y+8, r25	; 0x08
    1550:	a9 87       	std	Y+9, r26	; 0x09
    1552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <main+0x77e>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <main+0x7fc>
	else if (__tmp > 65535)
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <main+0x7e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1590:	7c 85       	ldd	r23, Y+12	; 0x0c
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	9e 85       	ldd	r25, Y+14	; 0x0e
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <main+0x7de>
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <main+0x7cc>
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <main+0x7c0>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <main+0x810>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <main+0x808>
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				if (first_password[i]!=val)
    1608:	fe 01       	movw	r30, r28
    160a:	ed 5b       	subi	r30, 0xBD	; 189
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	20 81       	ld	r18, Z
    1610:	31 81       	ldd	r19, Z+1	; 0x01
    1612:	ce 01       	movw	r24, r28
    1614:	88 5a       	subi	r24, 0xA8	; 168
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	fc 01       	movw	r30, r24
    161a:	e2 0f       	add	r30, r18
    161c:	f3 1f       	adc	r31, r19
    161e:	90 81       	ld	r25, Z
    1620:	fe 01       	movw	r30, r28
    1622:	eb 59       	subi	r30, 0x9B	; 155
    1624:	ff 4f       	sbci	r31, 0xFF	; 255
    1626:	80 81       	ld	r24, Z
    1628:	98 17       	cp	r25, r24
    162a:	49 f0       	breq	.+18     	; 0x163e <main+0x846>
				{
					br_flag=1;
    162c:	fe 01       	movw	r30, r28
    162e:	eb 5b       	subi	r30, 0xBB	; 187
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 83       	st	Z, r24
					UART_sendByte(A_ERROR);
    1636:	8a e5       	ldi	r24, 0x5A	; 90
    1638:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
    163c:	15 c0       	rjmp	.+42     	; 0x1668 <main+0x870>
		{
			UART_receiveString(first_password);
			uint8 br_flag=0;

			uint8 val=0;
			for (int i=0;i<5;i++)
    163e:	de 01       	movw	r26, r28
    1640:	ad 5b       	subi	r26, 0xBD	; 189
    1642:	bf 4f       	sbci	r27, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	ed 5b       	subi	r30, 0xBD	; 189
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	9c 93       	st	X, r25
    1654:	8e 93       	st	-X, r24
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5b       	subi	r30, 0xBD	; 189
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	85 30       	cpi	r24, 0x05	; 5
    1662:	91 05       	cpc	r25, r1
    1664:	0c f4       	brge	.+2      	; 0x1668 <main+0x870>
    1666:	53 cf       	rjmp	.-346    	; 0x150e <main+0x716>
					UART_sendByte(A_ERROR);
					break;
				}
			}

			if (!br_flag)
    1668:	fe 01       	movw	r30, r28
    166a:	eb 5b       	subi	r30, 0xBB	; 187
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 81       	ld	r24, Z
    1670:	88 23       	and	r24, r24
    1672:	19 f4       	brne	.+6      	; 0x167a <main+0x882>
			{
				UART_sendByte(PASSWORD_CHANGED);
    1674:	84 e4       	ldi	r24, 0x44	; 68
    1676:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
			}
			state=WAITING_STATE;// wait until getting new state
    167a:	fe 01       	movw	r30, r28
    167c:	e4 5b       	subi	r30, 0xB4	; 180
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	86 e4       	ldi	r24, 0x46	; 70
    1682:	80 83       	st	Z, r24
    1684:	53 cc       	rjmp	.-1882   	; 0xf2c <main+0x134>

		}
		else if (state==THREE_UMATCHED_PASS)
    1686:	fe 01       	movw	r30, r28
    1688:	e4 5b       	subi	r30, 0xB4	; 180
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	85 34       	cpi	r24, 0x45	; 69
    1690:	09 f0       	breq	.+2      	; 0x1694 <main+0x89c>
    1692:	4c cc       	rjmp	.-1896   	; 0xf2c <main+0x134>
		{

			Buzzer_on();
    1694:	0e 94 91 0b 	call	0x1722	; 0x1722 <Buzzer_on>
			Timer1_delay(60);
    1698:	8c e3       	ldi	r24, 0x3C	; 60
    169a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <Timer1_delay>
			Buzzer_off();
    169e:	0e 94 9d 0b 	call	0x173a	; 0x173a <Buzzer_off>
			state=WAITING_STATE; // wait until getting new state
    16a2:	fe 01       	movw	r30, r28
    16a4:	e4 5b       	subi	r30, 0xB4	; 180
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	86 e4       	ldi	r24, 0x46	; 70
    16aa:	80 83       	st	Z, r24
    16ac:	3f cc       	rjmp	.-1922   	; 0xf2c <main+0x134>

000016ae <tickscalc>:
		}
	}
}

void tickscalc(void)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    16b6:	80 91 78 01 	lds	r24, 0x0178
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	80 93 78 01 	sts	0x0178, r24
}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <Timer1_delay>:

void Timer1_delay(uint8 seconds)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&TIMER1_Configurations);
    16d2:	88 e6       	ldi	r24, 0x68	; 104
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Timer1_init>
	Timer1_setCallBack(tickscalc);
    16da:	87 e5       	ldi	r24, 0x57	; 87
    16dc:	9b e0       	ldi	r25, 0x0B	; 11
    16de:	0e 94 57 11 	call	0x22ae	; 0x22ae <Timer1_setCallBack>
	ticks=0;
    16e2:	10 92 78 01 	sts	0x0178, r1
	while (ticks<=seconds); /* Do Nothing */
    16e6:	90 91 78 01 	lds	r25, 0x0178
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	89 17       	cp	r24, r25
    16ee:	d8 f7       	brcc	.-10     	; 0x16e6 <Timer1_delay+0x20>
	Timer1_deinit();
    16f0:	0e 94 49 11 	call	0x2292	; 0x2292 <Timer1_deinit>
	ticks=0;
    16f4:	10 92 78 01 	sts	0x0178, r1

}
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <Buzzer_init>:
 * Description :
 * Function Responsible to setup the Buzzer Pin Direction as OUTPUT
 *
 */
void Buzzer_init()
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <Buzzer_on>:
 * Description :
 * Function Responsible to enable the buzzer
 *
 */
void Buzzer_on()
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	41 e0       	ldi	r20, 0x01	; 1
    1730:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
}
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <Buzzer_off>:
 * Description :
 * Function Responsible to disable the buzzer
 *
 */
void Buzzer_off()
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <DcMotor_Init>:
#include "std_types.h"
#include "pwm.h"
#include "gpio.h"

void DcMotor_Init(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN0, PIN_OUTPUT);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN1, PIN_OUTPUT);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 9d 0c 	call	0x193a	; 0x193a <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR1_INPUT_PORT,MOTOR1_INPUT_PIN0,LOGIC_LOW);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
	GPIO_writePin(MOTOR1_INPUT_PORT,MOTOR1_INPUT_PIN1,LOGIC_LOW);
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>

}
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <DcMotor_Rotate+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	6a 83       	std	Y+2, r22	; 0x02
	 * Motor Stops when its two terminals are low (LOW,LOW)
	 * Motor Changes its direction by changing the voltage on its terminals (HIGH,LOW) -  (LOW,HIGH)
	 * Motor Speed Range between 0-100
	 */

	if (state == MOTOR_STOP)
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 23       	and	r24, r24
    179a:	59 f4       	brne	.+22     	; 0x17b2 <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN0, LOGIC_LOW);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
		GPIO_writePin(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN1, LOGIC_LOW);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
    17b0:	1b c0       	rjmp	.+54     	; 0x17e8 <DcMotor_Rotate+0x60>
	}
	else if (state == MOTOR_CW)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	59 f4       	brne	.+22     	; 0x17ce <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN0, LOGIC_LOW);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
		GPIO_writePin(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN1, LOGIC_HIGH);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	41 e0       	ldi	r20, 0x01	; 1
    17c8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <DcMotor_Rotate+0x60>

	}
	else if (state == MOTOR_ANTI_CW)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	51 f4       	brne	.+20     	; 0x17e8 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(MOTOR1_INPUT_PORT, MOTOR1_INPUT_PIN0, LOGIC_HIGH);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>
		GPIO_writePin(MOTOR1_INPUT_PORT ,MOTOR1_INPUT_PIN1, LOGIC_LOW);
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <GPIO_writePin>

	}

	PWM_generatePwm(speed);
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	0e 94 03 10 	call	0x2006	; 0x2006 <PWM_generatePwm>

}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <EEPROM_writeByte+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EEPROM_writeByte+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    180a:	0e 94 99 11 	call	0x2332	; 0x2332 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    180e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1812:	88 30       	cpi	r24, 0x08	; 8
    1814:	11 f0       	breq	.+4      	; 0x181a <EEPROM_writeByte+0x22>
        return ERROR;
    1816:	1c 82       	std	Y+4, r1	; 0x04
    1818:	28 c0       	rjmp	.+80     	; 0x186a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	80 70       	andi	r24, 0x00	; 0
    1820:	97 70       	andi	r25, 0x07	; 7
    1822:	88 0f       	add	r24, r24
    1824:	89 2f       	mov	r24, r25
    1826:	88 1f       	adc	r24, r24
    1828:	99 0b       	sbc	r25, r25
    182a:	91 95       	neg	r25
    182c:	80 6a       	ori	r24, 0xA0	; 160
    182e:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1832:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1836:	88 31       	cpi	r24, 0x18	; 24
    1838:	11 f0       	breq	.+4      	; 0x183e <EEPROM_writeByte+0x46>
        return ERROR; 
    183a:	1c 82       	std	Y+4, r1	; 0x04
    183c:	16 c0       	rjmp	.+44     	; 0x186a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1844:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1848:	88 32       	cpi	r24, 0x28	; 40
    184a:	11 f0       	breq	.+4      	; 0x1850 <EEPROM_writeByte+0x58>
        return ERROR;
    184c:	1c 82       	std	Y+4, r1	; 0x04
    184e:	0d c0       	rjmp	.+26     	; 0x186a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1856:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    185a:	88 32       	cpi	r24, 0x28	; 40
    185c:	11 f0       	breq	.+4      	; 0x1862 <EEPROM_writeByte+0x6a>
        return ERROR;
    185e:	1c 82       	std	Y+4, r1	; 0x04
    1860:	04 c0       	rjmp	.+8      	; 0x186a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1862:	0e 94 a9 11 	call	0x2352	; 0x2352 <TWI_stop>
	
    return SUCCESS;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	8c 83       	std	Y+4, r24	; 0x04
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <EEPROM_readByte+0x6>
    1880:	00 d0       	rcall	.+0      	; 0x1882 <EEPROM_readByte+0x8>
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	7c 83       	std	Y+4, r23	; 0x04
    188e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1890:	0e 94 99 11 	call	0x2332	; 0x2332 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1894:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1898:	88 30       	cpi	r24, 0x08	; 8
    189a:	11 f0       	breq	.+4      	; 0x18a0 <EEPROM_readByte+0x26>
        return ERROR;
    189c:	1d 82       	std	Y+5, r1	; 0x05
    189e:	44 c0       	rjmp	.+136    	; 0x1928 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	80 70       	andi	r24, 0x00	; 0
    18a6:	97 70       	andi	r25, 0x07	; 7
    18a8:	88 0f       	add	r24, r24
    18aa:	89 2f       	mov	r24, r25
    18ac:	88 1f       	adc	r24, r24
    18ae:	99 0b       	sbc	r25, r25
    18b0:	91 95       	neg	r25
    18b2:	80 6a       	ori	r24, 0xA0	; 160
    18b4:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18b8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    18bc:	88 31       	cpi	r24, 0x18	; 24
    18be:	11 f0       	breq	.+4      	; 0x18c4 <EEPROM_readByte+0x4a>
        return ERROR;
    18c0:	1d 82       	std	Y+5, r1	; 0x05
    18c2:	32 c0       	rjmp	.+100    	; 0x1928 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18ca:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    18ce:	88 32       	cpi	r24, 0x28	; 40
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <EEPROM_readByte+0x5c>
        return ERROR;
    18d2:	1d 82       	std	Y+5, r1	; 0x05
    18d4:	29 c0       	rjmp	.+82     	; 0x1928 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18d6:	0e 94 99 11 	call	0x2332	; 0x2332 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18da:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    18de:	80 31       	cpi	r24, 0x10	; 16
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <EEPROM_readByte+0x6c>
        return ERROR;
    18e2:	1d 82       	std	Y+5, r1	; 0x05
    18e4:	21 c0       	rjmp	.+66     	; 0x1928 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	80 70       	andi	r24, 0x00	; 0
    18ec:	97 70       	andi	r25, 0x07	; 7
    18ee:	88 0f       	add	r24, r24
    18f0:	89 2f       	mov	r24, r25
    18f2:	88 1f       	adc	r24, r24
    18f4:	99 0b       	sbc	r25, r25
    18f6:	91 95       	neg	r25
    18f8:	81 6a       	ori	r24, 0xA1	; 161
    18fa:	0e 94 b4 11 	call	0x2368	; 0x2368 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    18fe:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1902:	80 34       	cpi	r24, 0x40	; 64
    1904:	11 f0       	breq	.+4      	; 0x190a <EEPROM_readByte+0x90>
        return ERROR;
    1906:	1d 82       	std	Y+5, r1	; 0x05
    1908:	0f c0       	rjmp	.+30     	; 0x1928 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    190a:	0e 94 de 11 	call	0x23bc	; 0x23bc <TWI_readByteWithNACK>
    190e:	eb 81       	ldd	r30, Y+3	; 0x03
    1910:	fc 81       	ldd	r31, Y+4	; 0x04
    1912:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1914:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <TWI_getStatus>
    1918:	88 35       	cpi	r24, 0x58	; 88
    191a:	11 f0       	breq	.+4      	; 0x1920 <EEPROM_readByte+0xa6>
        return ERROR;
    191c:	1d 82       	std	Y+5, r1	; 0x05
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1920:	0e 94 a9 11 	call	0x2352	; 0x2352 <TWI_stop>

    return SUCCESS;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	8d 83       	std	Y+5, r24	; 0x05
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <GPIO_setupPinDirection+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_setupPinDirection+0x8>
    1942:	0f 92       	push	r0
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	6a 83       	std	Y+2, r22	; 0x02
    194c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	08 f0       	brcs	.+2      	; 0x1956 <GPIO_setupPinDirection+0x1c>
    1954:	d5 c0       	rjmp	.+426    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
    1956:	89 81       	ldd	r24, Y+1	; 0x01
    1958:	84 30       	cpi	r24, 0x04	; 4
    195a:	08 f0       	brcs	.+2      	; 0x195e <GPIO_setupPinDirection+0x24>
    195c:	d1 c0       	rjmp	.+418    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3d 83       	std	Y+5, r19	; 0x05
    1966:	2c 83       	std	Y+4, r18	; 0x04
    1968:	8c 81       	ldd	r24, Y+4	; 0x04
    196a:	9d 81       	ldd	r25, Y+5	; 0x05
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <GPIO_setupPinDirection+0x3a>
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <GPIO_setupPinDirection+0xc0>
    1974:	2c 81       	ldd	r18, Y+4	; 0x04
    1976:	3d 81       	ldd	r19, Y+5	; 0x05
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	2c f4       	brge	.+10     	; 0x1988 <GPIO_setupPinDirection+0x4e>
    197e:	8c 81       	ldd	r24, Y+4	; 0x04
    1980:	9d 81       	ldd	r25, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	71 f0       	breq	.+28     	; 0x19a2 <GPIO_setupPinDirection+0x68>
    1986:	bc c0       	rjmp	.+376    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
    1988:	2c 81       	ldd	r18, Y+4	; 0x04
    198a:	3d 81       	ldd	r19, Y+5	; 0x05
    198c:	22 30       	cpi	r18, 0x02	; 2
    198e:	31 05       	cpc	r19, r1
    1990:	09 f4       	brne	.+2      	; 0x1994 <GPIO_setupPinDirection+0x5a>
    1992:	5f c0       	rjmp	.+190    	; 0x1a52 <GPIO_setupPinDirection+0x118>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_setupPinDirection+0x66>
    199e:	85 c0       	rjmp	.+266    	; 0x1aaa <GPIO_setupPinDirection+0x170>
    19a0:	af c0       	rjmp	.+350    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	a1 f4       	brne	.+40     	; 0x19d0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    19a8:	aa e3       	ldi	r26, 0x3A	; 58
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_setupPinDirection+0x8c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_setupPinDirection+0x88>
    19ca:	84 2b       	or	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	98 c0       	rjmp	.+304    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    19d0:	aa e3       	ldi	r26, 0x3A	; 58
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ea e3       	ldi	r30, 0x3A	; 58
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	48 2f       	mov	r20, r24
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	28 2f       	mov	r18, r24
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	02 2e       	mov	r0, r18
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <GPIO_setupPinDirection+0xb4>
    19ea:	88 0f       	add	r24, r24
    19ec:	99 1f       	adc	r25, r25
    19ee:	0a 94       	dec	r0
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <GPIO_setupPinDirection+0xb0>
    19f2:	80 95       	com	r24
    19f4:	84 23       	and	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	83 c0       	rjmp	.+262    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	a1 f4       	brne	.+40     	; 0x1a28 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1a00:	a7 e3       	ldi	r26, 0x37	; 55
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e7 e3       	ldi	r30, 0x37	; 55
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_setupPinDirection+0xe4>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_setupPinDirection+0xe0>
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	6c c0       	rjmp	.+216    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1a28:	a7 e3       	ldi	r26, 0x37	; 55
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e7 e3       	ldi	r30, 0x37	; 55
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 2e       	mov	r0, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_setupPinDirection+0x10c>
    1a42:	88 0f       	add	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_setupPinDirection+0x108>
    1a4a:	80 95       	com	r24
    1a4c:	84 23       	and	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	57 c0       	rjmp	.+174    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	a1 f4       	brne	.+40     	; 0x1a80 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a58:	a4 e3       	ldi	r26, 0x34	; 52
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_setupPinDirection+0x13c>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_setupPinDirection+0x138>
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	40 c0       	rjmp	.+128    	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a80:	a4 e3       	ldi	r26, 0x34	; 52
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e4 e3       	ldi	r30, 0x34	; 52
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_setupPinDirection+0x164>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_setupPinDirection+0x160>
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	2b c0       	rjmp	.+86     	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	a1 f4       	brne	.+40     	; 0x1ad8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1ab0:	a1 e3       	ldi	r26, 0x31	; 49
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e1 e3       	ldi	r30, 0x31	; 49
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_setupPinDirection+0x194>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_setupPinDirection+0x190>
    1ad2:	84 2b       	or	r24, r20
    1ad4:	8c 93       	st	X, r24
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1ad8:	a1 e3       	ldi	r26, 0x31	; 49
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e1 e3       	ldi	r30, 0x31	; 49
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_setupPinDirection+0x1bc>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_setupPinDirection+0x1b8>
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <GPIO_writePin+0x6>
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <GPIO_writePin+0x8>
    1b18:	0f 92       	push	r0
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	6a 83       	std	Y+2, r22	; 0x02
    1b22:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	08 f0       	brcs	.+2      	; 0x1b2c <GPIO_writePin+0x1c>
    1b2a:	d5 c0       	rjmp	.+426    	; 0x1cd6 <GPIO_writePin+0x1c6>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	84 30       	cpi	r24, 0x04	; 4
    1b30:	08 f0       	brcs	.+2      	; 0x1b34 <GPIO_writePin+0x24>
    1b32:	d1 c0       	rjmp	.+418    	; 0x1cd6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3d 83       	std	Y+5, r19	; 0x05
    1b3c:	2c 83       	std	Y+4, r18	; 0x04
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <GPIO_writePin+0x3a>
    1b48:	43 c0       	rjmp	.+134    	; 0x1bd0 <GPIO_writePin+0xc0>
    1b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <GPIO_writePin+0x4e>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	71 f0       	breq	.+28     	; 0x1b78 <GPIO_writePin+0x68>
    1b5c:	bc c0       	rjmp	.+376    	; 0x1cd6 <GPIO_writePin+0x1c6>
    1b5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b60:	3d 81       	ldd	r19, Y+5	; 0x05
    1b62:	22 30       	cpi	r18, 0x02	; 2
    1b64:	31 05       	cpc	r19, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <GPIO_writePin+0x5a>
    1b68:	5f c0       	rjmp	.+190    	; 0x1c28 <GPIO_writePin+0x118>
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6e:	83 30       	cpi	r24, 0x03	; 3
    1b70:	91 05       	cpc	r25, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <GPIO_writePin+0x66>
    1b74:	85 c0       	rjmp	.+266    	; 0x1c80 <GPIO_writePin+0x170>
    1b76:	af c0       	rjmp	.+350    	; 0x1cd6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	a1 f4       	brne	.+40     	; 0x1ba6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b7e:	ab e3       	ldi	r26, 0x3B	; 59
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	eb e3       	ldi	r30, 0x3B	; 59
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <GPIO_writePin+0x8c>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <GPIO_writePin+0x88>
    1ba0:	84 2b       	or	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	98 c0       	rjmp	.+304    	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ba6:	ab e3       	ldi	r26, 0x3B	; 59
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	eb e3       	ldi	r30, 0x3B	; 59
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <GPIO_writePin+0xb4>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <GPIO_writePin+0xb0>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	83 c0       	rjmp	.+262    	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	a1 f4       	brne	.+40     	; 0x1bfe <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1bd6:	a8 e3       	ldi	r26, 0x38	; 56
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e8 e3       	ldi	r30, 0x38	; 56
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <GPIO_writePin+0xe4>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <GPIO_writePin+0xe0>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
    1bfc:	6c c0       	rjmp	.+216    	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1bfe:	a8 e3       	ldi	r26, 0x38	; 56
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e8 e3       	ldi	r30, 0x38	; 56
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	48 2f       	mov	r20, r24
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	02 2e       	mov	r0, r18
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <GPIO_writePin+0x10c>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	0a 94       	dec	r0
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <GPIO_writePin+0x108>
    1c20:	80 95       	com	r24
    1c22:	84 23       	and	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	57 c0       	rjmp	.+174    	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	a1 f4       	brne	.+40     	; 0x1c56 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1c2e:	a5 e3       	ldi	r26, 0x35	; 53
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e5 e3       	ldi	r30, 0x35	; 53
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <GPIO_writePin+0x13c>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <GPIO_writePin+0x138>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	40 c0       	rjmp	.+128    	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c56:	a5 e3       	ldi	r26, 0x35	; 53
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e5 e3       	ldi	r30, 0x35	; 53
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <GPIO_writePin+0x164>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <GPIO_writePin+0x160>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	2b c0       	rjmp	.+86     	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	a1 f4       	brne	.+40     	; 0x1cae <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c86:	a2 e3       	ldi	r26, 0x32	; 50
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e2 e3       	ldi	r30, 0x32	; 50
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 2f       	mov	r20, r24
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 2e       	mov	r0, r18
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <GPIO_writePin+0x194>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	0a 94       	dec	r0
    1ca6:	e2 f7       	brpl	.-8      	; 0x1ca0 <GPIO_writePin+0x190>
    1ca8:	84 2b       	or	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1cae:	a2 e3       	ldi	r26, 0x32	; 50
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e2 e3       	ldi	r30, 0x32	; 50
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <GPIO_writePin+0x1bc>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <GPIO_writePin+0x1b8>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <GPIO_readPin+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_readPin+0x8>
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	8a 83       	std	Y+2, r24	; 0x02
    1cf6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cf8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	88 30       	cpi	r24, 0x08	; 8
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <GPIO_readPin+0x1c>
    1d00:	84 c0       	rjmp	.+264    	; 0x1e0a <GPIO_readPin+0x124>
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	84 30       	cpi	r24, 0x04	; 4
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <GPIO_readPin+0x24>
    1d08:	80 c0       	rjmp	.+256    	; 0x1e0a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3d 83       	std	Y+5, r19	; 0x05
    1d12:	2c 83       	std	Y+4, r18	; 0x04
    1d14:	4c 81       	ldd	r20, Y+4	; 0x04
    1d16:	5d 81       	ldd	r21, Y+5	; 0x05
    1d18:	41 30       	cpi	r20, 0x01	; 1
    1d1a:	51 05       	cpc	r21, r1
    1d1c:	79 f1       	breq	.+94     	; 0x1d7c <GPIO_readPin+0x96>
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	82 30       	cpi	r24, 0x02	; 2
    1d24:	91 05       	cpc	r25, r1
    1d26:	34 f4       	brge	.+12     	; 0x1d34 <GPIO_readPin+0x4e>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	21 15       	cp	r18, r1
    1d2e:	31 05       	cpc	r19, r1
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <GPIO_readPin+0x66>
    1d32:	6b c0       	rjmp	.+214    	; 0x1e0a <GPIO_readPin+0x124>
    1d34:	4c 81       	ldd	r20, Y+4	; 0x04
    1d36:	5d 81       	ldd	r21, Y+5	; 0x05
    1d38:	42 30       	cpi	r20, 0x02	; 2
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	b9 f1       	breq	.+110    	; 0x1dac <GPIO_readPin+0xc6>
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <GPIO_readPin+0x64>
    1d48:	49 c0       	rjmp	.+146    	; 0x1ddc <GPIO_readPin+0xf6>
    1d4a:	5f c0       	rjmp	.+190    	; 0x1e0a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d4c:	e9 e3       	ldi	r30, 0x39	; 57
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_readPin+0x7e>
    1d60:	55 95       	asr	r21
    1d62:	47 95       	ror	r20
    1d64:	8a 95       	dec	r24
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_readPin+0x7a>
    1d68:	ca 01       	movw	r24, r20
    1d6a:	81 70       	andi	r24, 0x01	; 1
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	88 23       	and	r24, r24
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	49 c0       	rjmp	.+146    	; 0x1e0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d78:	19 82       	std	Y+1, r1	; 0x01
    1d7a:	47 c0       	rjmp	.+142    	; 0x1e0a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d7c:	e6 e3       	ldi	r30, 0x36	; 54
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a9 01       	movw	r20, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_readPin+0xae>
    1d90:	55 95       	asr	r21
    1d92:	47 95       	ror	r20
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_readPin+0xaa>
    1d98:	ca 01       	movw	r24, r20
    1d9a:	81 70       	andi	r24, 0x01	; 1
    1d9c:	90 70       	andi	r25, 0x00	; 0
    1d9e:	88 23       	and	r24, r24
    1da0:	19 f0       	breq	.+6      	; 0x1da8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	31 c0       	rjmp	.+98     	; 0x1e0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da8:	19 82       	std	Y+1, r1	; 0x01
    1daa:	2f c0       	rjmp	.+94     	; 0x1e0a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1dac:	e3 e3       	ldi	r30, 0x33	; 51
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a9 01       	movw	r20, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_readPin+0xde>
    1dc0:	55 95       	asr	r21
    1dc2:	47 95       	ror	r20
    1dc4:	8a 95       	dec	r24
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_readPin+0xda>
    1dc8:	ca 01       	movw	r24, r20
    1dca:	81 70       	andi	r24, 0x01	; 1
    1dcc:	90 70       	andi	r25, 0x00	; 0
    1dce:	88 23       	and	r24, r24
    1dd0:	19 f0       	breq	.+6      	; 0x1dd8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	19 c0       	rjmp	.+50     	; 0x1e0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd8:	19 82       	std	Y+1, r1	; 0x01
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ddc:	e0 e3       	ldi	r30, 0x30	; 48
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a9 01       	movw	r20, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_readPin+0x10e>
    1df0:	55 95       	asr	r21
    1df2:	47 95       	ror	r20
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_readPin+0x10a>
    1df8:	ca 01       	movw	r24, r20
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	88 23       	and	r24, r24
    1e00:	19 f0       	breq	.+6      	; 0x1e08 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1e08:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <GPIO_setupPortDirection+0x6>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <GPIO_setupPortDirection+0x8>
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	90 f5       	brcc	.+100    	; 0x1e96 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	3c 83       	std	Y+4, r19	; 0x04
    1e3a:	2b 83       	std	Y+3, r18	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	d1 f0       	breq	.+52     	; 0x1e7a <GPIO_setupPortDirection+0x5e>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	22 30       	cpi	r18, 0x02	; 2
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <GPIO_setupPortDirection+0x3e>
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <GPIO_setupPortDirection+0x54>
    1e58:	1e c0       	rjmp	.+60     	; 0x1e96 <GPIO_setupPortDirection+0x7a>
    1e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5e:	22 30       	cpi	r18, 0x02	; 2
    1e60:	31 05       	cpc	r19, r1
    1e62:	81 f0       	breq	.+32     	; 0x1e84 <GPIO_setupPortDirection+0x68>
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	83 30       	cpi	r24, 0x03	; 3
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	81 f0       	breq	.+32     	; 0x1e8e <GPIO_setupPortDirection+0x72>
    1e6e:	13 c0       	rjmp	.+38     	; 0x1e96 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e70:	ea e3       	ldi	r30, 0x3A	; 58
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	80 83       	st	Z, r24
    1e78:	0e c0       	rjmp	.+28     	; 0x1e96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e7a:	e7 e3       	ldi	r30, 0x37	; 55
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	80 83       	st	Z, r24
    1e82:	09 c0       	rjmp	.+18     	; 0x1e96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e84:	e4 e3       	ldi	r30, 0x34	; 52
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	80 83       	st	Z, r24
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e8e:	e1 e3       	ldi	r30, 0x31	; 49
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <GPIO_writePort+0x6>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <GPIO_writePort+0x8>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	84 30       	cpi	r24, 0x04	; 4
    1eb8:	90 f5       	brcc	.+100    	; 0x1f1e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3c 83       	std	Y+4, r19	; 0x04
    1ec2:	2b 83       	std	Y+3, r18	; 0x03
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	d1 f0       	breq	.+52     	; 0x1f02 <GPIO_writePort+0x5e>
    1ece:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed2:	22 30       	cpi	r18, 0x02	; 2
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	2c f4       	brge	.+10     	; 0x1ee2 <GPIO_writePort+0x3e>
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	61 f0       	breq	.+24     	; 0x1ef8 <GPIO_writePort+0x54>
    1ee0:	1e c0       	rjmp	.+60     	; 0x1f1e <GPIO_writePort+0x7a>
    1ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee6:	22 30       	cpi	r18, 0x02	; 2
    1ee8:	31 05       	cpc	r19, r1
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <GPIO_writePort+0x68>
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef0:	83 30       	cpi	r24, 0x03	; 3
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <GPIO_writePort+0x72>
    1ef6:	13 c0       	rjmp	.+38     	; 0x1f1e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ef8:	eb e3       	ldi	r30, 0x3B	; 59
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	80 83       	st	Z, r24
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f02:	e8 e3       	ldi	r30, 0x38	; 56
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	80 83       	st	Z, r24
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f0c:	e5 e3       	ldi	r30, 0x35	; 53
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	80 83       	st	Z, r24
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f16:	e2 e3       	ldi	r30, 0x32	; 50
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <GPIO_readPort+0x6>
    1f32:	00 d0       	rcall	.+0      	; 0x1f34 <GPIO_readPort+0x8>
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f3a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	84 30       	cpi	r24, 0x04	; 4
    1f40:	90 f5       	brcc	.+100    	; 0x1fa6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	3c 83       	std	Y+4, r19	; 0x04
    1f4a:	2b 83       	std	Y+3, r18	; 0x03
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	91 05       	cpc	r25, r1
    1f54:	d1 f0       	breq	.+52     	; 0x1f8a <GPIO_readPort+0x5e>
    1f56:	2b 81       	ldd	r18, Y+3	; 0x03
    1f58:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <GPIO_readPort+0x3e>
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <GPIO_readPort+0x54>
    1f68:	1e c0       	rjmp	.+60     	; 0x1fa6 <GPIO_readPort+0x7a>
    1f6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	81 f0       	breq	.+32     	; 0x1f94 <GPIO_readPort+0x68>
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	81 f0       	breq	.+32     	; 0x1f9e <GPIO_readPort+0x72>
    1f7e:	13 c0       	rjmp	.+38     	; 0x1fa6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f80:	e9 e3       	ldi	r30, 0x39	; 57
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	89 83       	std	Y+1, r24	; 0x01
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f8a:	e6 e3       	ldi	r30, 0x36	; 54
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	09 c0       	rjmp	.+18     	; 0x1fa6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f94:	e3 e3       	ldi	r30, 0x33	; 51
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	04 c0       	rjmp	.+8      	; 0x1fa6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f9e:	e0 e3       	ldi	r30, 0x30	; 48
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <PWM_prescaler_bits>:
#include "pwm.h"
#include <avr/io.h>
#include "common_macros.h"

static uint8 PWM_prescaler_bits(uint8 prescaler_value)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <PWM_prescaler_bits+0x6>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	if (prescaler_value == 0)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	88 23       	and	r24, r24
    1fc8:	11 f4       	brne	.+4      	; 0x1fce <PWM_prescaler_bits+0x18>
		return 0;
    1fca:	1a 82       	std	Y+2, r1	; 0x02
    1fcc:	13 c0       	rjmp	.+38     	; 0x1ff4 <PWM_prescaler_bits+0x3e>
	else if (prescaler_value == 1)
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <PWM_prescaler_bits+0x24>
		return 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8a 83       	std	Y+2, r24	; 0x02
    1fd8:	0d c0       	rjmp	.+26     	; 0x1ff4 <PWM_prescaler_bits+0x3e>
	else if (prescaler_value == 8)
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	88 30       	cpi	r24, 0x08	; 8
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <PWM_prescaler_bits+0x30>
		return 2;
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
    1fe4:	07 c0       	rjmp	.+14     	; 0x1ff4 <PWM_prescaler_bits+0x3e>
	else if (prescaler_value == 64)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	80 34       	cpi	r24, 0x40	; 64
    1fea:	19 f4       	brne	.+6      	; 0x1ff2 <PWM_prescaler_bits+0x3c>
		return 3;
    1fec:	83 e0       	ldi	r24, 0x03	; 3
    1fee:	8a 83       	std	Y+2, r24	; 0x02
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <PWM_prescaler_bits+0x3e>
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <PWM_prescaler_bits+0x42>
	else if (prescaler_value == 256)
		return 4;
	else if (prescaler_value == 1024)
		return 5;

}
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <PWM_generatePwm>:

void PWM_generatePwm(uint8 dutyCycle)
{
    2006:	0f 93       	push	r16
    2008:	1f 93       	push	r17
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <PWM_generatePwm+0xa>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	8a 83       	std	Y+2, r24	; 0x02

	TCNT0 = 0; /* Start Counting Up from zero */
    2016:	e2 e5       	ldi	r30, 0x52	; 82
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1
	OCR0 = (2.54*dutyCycle); /* Setting Duty Cycle /*
    201c:	0c e5       	ldi	r16, 0x5C	; 92
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	88 2f       	mov	r24, r24
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	aa 27       	eor	r26, r26
    2028:	97 fd       	sbrc	r25, 7
    202a:	a0 95       	com	r26
    202c:	ba 2f       	mov	r27, r26
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	2c e5       	ldi	r18, 0x5C	; 92
    2040:	3f e8       	ldi	r19, 0x8F	; 143
    2042:	42 e2       	ldi	r20, 0x22	; 34
    2044:	50 e4       	ldi	r21, 0x40	; 64
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	f8 01       	movw	r30, r16
    205c:	80 83       	st	Z, r24
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/pre_scaler CS00= x CS01= x  CS02= x
	 *
	 */
	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    205e:	a7 e3       	ldi	r26, 0x37	; 55
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e7 e3       	ldi	r30, 0x37	; 55
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	88 60       	ori	r24, 0x08	; 8
    206a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, FOC0);
    206c:	a3 e5       	ldi	r26, 0x53	; 83
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e3 e5       	ldi	r30, 0x53	; 83
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8f 77       	andi	r24, 0x7F	; 127
    2078:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    207a:	a3 e5       	ldi	r26, 0x53	; 83
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	e3 e5       	ldi	r30, 0x53	; 83
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	80 64       	ori	r24, 0x40	; 64
    2086:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    2088:	a3 e5       	ldi	r26, 0x53	; 83
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e3 e5       	ldi	r30, 0x53	; 83
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	88 60       	ori	r24, 0x08	; 8
    2094:	8c 93       	st	X, r24
	uint8 clock_select = PWM_prescaler_bits(PWM_PRESCALER);
    2096:	88 e0       	ldi	r24, 0x08	; 8
    2098:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <PWM_prescaler_bits>
    209c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TCCR0, COM01);
    209e:	a3 e5       	ldi	r26, 0x53	; 83
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e3 e5       	ldi	r30, 0x53	; 83
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 62       	ori	r24, 0x20	; 32
    20aa:	8c 93       	st	X, r24
	TCCR0 = TCCR0 | (0x07&clock_select);
    20ac:	a3 e5       	ldi	r26, 0x53	; 83
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e3 e5       	ldi	r30, 0x53	; 83
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	98 2f       	mov	r25, r24
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	87 70       	andi	r24, 0x07	; 7
    20bc:	89 2b       	or	r24, r25
    20be:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE0);
    20c0:	a9 e5       	ldi	r26, 0x59	; 89
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 e5       	ldi	r30, 0x59	; 89
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8d 7f       	andi	r24, 0xFD	; 253
    20cc:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, TOIE0);
    20ce:	a9 e5       	ldi	r26, 0x59	; 89
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e9 e5       	ldi	r30, 0x59	; 89
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8e 7f       	andi	r24, 0xFE	; 254
    20da:	8c 93       	st	X, r24


}
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	08 95       	ret

000020ea <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(TIMER1_OVF_vect)
{
    20ea:	1f 92       	push	r1
    20ec:	0f 92       	push	r0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	0f 92       	push	r0
    20f2:	11 24       	eor	r1, r1
    20f4:	2f 93       	push	r18
    20f6:	3f 93       	push	r19
    20f8:	4f 93       	push	r20
    20fa:	5f 93       	push	r21
    20fc:	6f 93       	push	r22
    20fe:	7f 93       	push	r23
    2100:	8f 93       	push	r24
    2102:	9f 93       	push	r25
    2104:	af 93       	push	r26
    2106:	bf 93       	push	r27
    2108:	ef 93       	push	r30
    210a:	ff 93       	push	r31
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2114:	80 91 79 01 	lds	r24, 0x0179
    2118:	90 91 7a 01 	lds	r25, 0x017A
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	29 f0       	breq	.+10     	; 0x212a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2120:	e0 91 79 01 	lds	r30, 0x0179
    2124:	f0 91 7a 01 	lds	r31, 0x017A
    2128:	09 95       	icall
	}

}
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	ff 91       	pop	r31
    2130:	ef 91       	pop	r30
    2132:	bf 91       	pop	r27
    2134:	af 91       	pop	r26
    2136:	9f 91       	pop	r25
    2138:	8f 91       	pop	r24
    213a:	7f 91       	pop	r23
    213c:	6f 91       	pop	r22
    213e:	5f 91       	pop	r21
    2140:	4f 91       	pop	r20
    2142:	3f 91       	pop	r19
    2144:	2f 91       	pop	r18
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	0f 90       	pop	r0
    214c:	1f 90       	pop	r1
    214e:	18 95       	reti

00002150 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2150:	1f 92       	push	r1
    2152:	0f 92       	push	r0
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	0f 92       	push	r0
    2158:	11 24       	eor	r1, r1
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    217a:	80 91 79 01 	lds	r24, 0x0179
    217e:	90 91 7a 01 	lds	r25, 0x017A
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	29 f0       	breq	.+10     	; 0x2190 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2186:	e0 91 79 01 	lds	r30, 0x0179
    218a:	f0 91 7a 01 	lds	r31, 0x017A
    218e:	09 95       	icall
	}

}
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	ff 91       	pop	r31
    2196:	ef 91       	pop	r30
    2198:	bf 91       	pop	r27
    219a:	af 91       	pop	r26
    219c:	9f 91       	pop	r25
    219e:	8f 91       	pop	r24
    21a0:	7f 91       	pop	r23
    21a2:	6f 91       	pop	r22
    21a4:	5f 91       	pop	r21
    21a6:	4f 91       	pop	r20
    21a8:	3f 91       	pop	r19
    21aa:	2f 91       	pop	r18
    21ac:	0f 90       	pop	r0
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	0f 90       	pop	r0
    21b2:	1f 90       	pop	r1
    21b4:	18 95       	reti

000021b6 <Timer1_init>:
 * 1. Setup the timing like with ability to configure in different modes (Normal / CTC ..)
 * 2. Enable the CLOCK.
 * 3. Setup the user-define Frequency.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <Timer1_init+0x6>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
	 * WGM11  = affect timer mode / operation
	 * WGM10  = affect timer mode / operation
	 * All bits are configured with the pre-defined dynamic configurations
	 ***********************************************************************/

	TCCR1A=0;
    21c4:	ef e4       	ldi	r30, 0x4F	; 79
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	10 82       	st	Z, r1
	 * CS12  = Clock Select bit
	 * CS11  = Clock Select bit
	 * CS10  =  Clock Select bit
	 * All bits are configured with the pre-defined dynamic configurations
	 ***********************************************************************/
	TCCR1B=0;
    21ca:	ee e4       	ldi	r30, 0x4E	; 78
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	10 82       	st	Z, r1
	TCNT1=0;
    21d0:	ec e4       	ldi	r30, 0x4C	; 76
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	11 82       	std	Z+1, r1	; 0x01
    21d6:	10 82       	st	Z, r1

	TCNT1=Config_Ptr->initial_value;
    21d8:	ac e4       	ldi	r26, 0x4C	; 76
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	11 96       	adiw	r26, 0x01	; 1
    21e6:	9c 93       	st	X, r25
    21e8:	8e 93       	st	-X, r24
	 * TOIE0 = Timer0 bit - not used -
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/


	if (Config_Ptr->mode==TIMER_MODE_NORMAL)
    21ea:	e9 81       	ldd	r30, Y+1	; 0x01
    21ec:	fa 81       	ldd	r31, Y+2	; 0x02
    21ee:	85 81       	ldd	r24, Z+5	; 0x05
    21f0:	88 23       	and	r24, r24
    21f2:	b1 f4       	brne	.+44     	; 0x2220 <Timer1_init+0x6a>
	{
		/* NOT PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	88 60       	ori	r24, 0x08	; 8
    2200:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2202:	af e4       	ldi	r26, 0x4F	; 79
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	84 60       	ori	r24, 0x04	; 4
    220e:	8c 93       	st	X, r24

		/* Normal Mode (TIMER OVER FLOW) Interrupt Enable */
		SET_BIT(TIMSK,TOIE1);
    2210:	a9 e5       	ldi	r26, 0x59	; 89
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	e9 e5       	ldi	r30, 0x59	; 89
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	84 60       	ori	r24, 0x04	; 4
    221c:	8c 93       	st	X, r24
    221e:	2a c0       	rjmp	.+84     	; 0x2274 <Timer1_init+0xbe>


	}
	else if (Config_Ptr->mode==TIMER_MODE_CTC)
    2220:	e9 81       	ldd	r30, Y+1	; 0x01
    2222:	fa 81       	ldd	r31, Y+2	; 0x02
    2224:	85 81       	ldd	r24, Z+5	; 0x05
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	29 f5       	brne	.+74     	; 0x2274 <Timer1_init+0xbe>
	{
		/* NOT PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    222a:	af e4       	ldi	r26, 0x4F	; 79
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	ef e4       	ldi	r30, 0x4F	; 79
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 60       	ori	r24, 0x08	; 8
    2236:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2238:	af e4       	ldi	r26, 0x4F	; 79
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ef e4       	ldi	r30, 0x4F	; 79
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	84 60       	ori	r24, 0x04	; 4
    2244:	8c 93       	st	X, r24

		SET_BIT(TCCR1B,WGM12);
    2246:	ae e4       	ldi	r26, 0x4E	; 78
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e4       	ldi	r30, 0x4E	; 78
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	8c 93       	st	X, r24
		OCR1A=Config_Ptr->compare_value;
    2254:	aa e4       	ldi	r26, 0x4A	; 74
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 81       	ldd	r30, Y+1	; 0x01
    225a:	fa 81       	ldd	r31, Y+2	; 0x02
    225c:	82 81       	ldd	r24, Z+2	; 0x02
    225e:	93 81       	ldd	r25, Z+3	; 0x03
    2260:	11 96       	adiw	r26, 0x01	; 1
    2262:	9c 93       	st	X, r25
    2264:	8e 93       	st	-X, r24

		/* CTC (COMPARE MATCH) Interrupt Enable */
		SET_BIT(TIMSK,OCIE1A);
    2266:	a9 e5       	ldi	r26, 0x59	; 89
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 e5       	ldi	r30, 0x59	; 89
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	80 61       	ori	r24, 0x10	; 16
    2272:	8c 93       	st	X, r24


	}
	TCCR1B|=Config_Ptr->prescaler;
    2274:	ae e4       	ldi	r26, 0x4E	; 78
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	ee e4       	ldi	r30, 0x4E	; 78
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	90 81       	ld	r25, Z
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	84 81       	ldd	r24, Z+4	; 0x04
    2284:	89 2b       	or	r24, r25
    2286:	8c 93       	st	X, r24


}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <Timer1_deinit>:
/*
 * Description :
 * Function Responsible to Disable Timer1
 */
void Timer1_deinit(void)
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
	/* Disable Clock Source entered to Timer */
	TCCR1B=0;
    229a:	ee e4       	ldi	r30, 0x4E	; 78
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	10 82       	st	Z, r1
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    22a0:	10 92 7a 01 	sts	0x017A, r1
    22a4:	10 92 79 01 	sts	0x0179, r1

}
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <Timer1_setCallBack>:
/*
 * Description :
 * Function Responsible to Set the Call-back function used in Interrupt-Handeler
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <Timer1_setCallBack+0x6>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	89 83       	std	Y+1, r24	; 0x01
	/* set the call back function address ar received */
	g_callBackPtr = a_ptr;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	90 93 7a 01 	sts	0x017A, r25
    22c4:	80 93 79 01 	sts	0x0179, r24
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <TWI_init+0x6>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	9a 83       	std	Y+2, r25	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    22e0:	a0 e2       	ldi	r26, 0x20	; 32
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e9 81       	ldd	r30, Y+1	; 0x01
    22e6:	fa 81       	ldd	r31, Y+2	; 0x02
    22e8:	81 81       	ldd	r24, Z+1	; 0x01
    22ea:	8c 93       	st	X, r24
    CLEAR_BIT(TWSR,TWPS0);
    22ec:	a1 e2       	ldi	r26, 0x21	; 33
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	e1 e2       	ldi	r30, 0x21	; 33
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8e 7f       	andi	r24, 0xFE	; 254
    22f8:	8c 93       	st	X, r24
    CLEAR_BIT(TWSR,TWPS1);
    22fa:	a1 e2       	ldi	r26, 0x21	; 33
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e1 e2       	ldi	r30, 0x21	; 33
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8d 7f       	andi	r24, 0xFD	; 253
    2306:	8c 93       	st	X, r24
	TWSR = Config_Ptr->prescale;
    2308:	a1 e2       	ldi	r26, 0x21	; 33
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e9 81       	ldd	r30, Y+1	; 0x01
    230e:	fa 81       	ldd	r31, Y+2	; 0x02
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	8c 93       	st	X, r24
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	TWAR=Config_Ptr->address;
    2314:	a2 e2       	ldi	r26, 0x22	; 34
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	80 81       	ld	r24, Z
    231e:	8c 93       	st	X, r24
    TWCR = (1<<TWEN); /* enable TWI */
    2320:	e6 e5       	ldi	r30, 0x56	; 86
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	84 e0       	ldi	r24, 0x04	; 4
    2326:	80 83       	st	Z, r24
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	cf 91       	pop	r28
    232e:	df 91       	pop	r29
    2330:	08 95       	ret

00002332 <TWI_start>:

void TWI_start(void)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    233a:	e6 e5       	ldi	r30, 0x56	; 86
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	84 ea       	ldi	r24, 0xA4	; 164
    2340:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2342:	e6 e5       	ldi	r30, 0x56	; 86
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	88 23       	and	r24, r24
    234a:	dc f7       	brge	.-10     	; 0x2342 <TWI_start+0x10>
}
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <TWI_stop>:

void TWI_stop(void)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    235a:	e6 e5       	ldi	r30, 0x56	; 86
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	84 e9       	ldi	r24, 0x94	; 148
    2360:	80 83       	st	Z, r24
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	0f 92       	push	r0
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2374:	e3 e2       	ldi	r30, 0x23	; 35
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    237c:	e6 e5       	ldi	r30, 0x56	; 86
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	84 e8       	ldi	r24, 0x84	; 132
    2382:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2384:	e6 e5       	ldi	r30, 0x56	; 86
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	88 23       	and	r24, r24
    238c:	dc f7       	brge	.-10     	; 0x2384 <TWI_writeByte+0x1c>
}
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    239e:	e6 e5       	ldi	r30, 0x56	; 86
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	84 ec       	ldi	r24, 0xC4	; 196
    23a4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23a6:	e6 e5       	ldi	r30, 0x56	; 86
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	88 23       	and	r24, r24
    23ae:	dc f7       	brge	.-10     	; 0x23a6 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    23b0:	e3 e2       	ldi	r30, 0x23	; 35
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
}
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23c4:	e6 e5       	ldi	r30, 0x56	; 86
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	84 e8       	ldi	r24, 0x84	; 132
    23ca:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23cc:	e6 e5       	ldi	r30, 0x56	; 86
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	88 23       	and	r24, r24
    23d4:	dc f7       	brge	.-10     	; 0x23cc <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    23d6:	e3 e2       	ldi	r30, 0x23	; 35
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
}
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	0f 92       	push	r0
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    23ec:	e1 e2       	ldi	r30, 0x21	; 33
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	88 7f       	andi	r24, 0xF8	; 248
    23f4:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ConfigPtr)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <UART_init+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <UART_init+0x8>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2410:	1a 82       	std	Y+2, r1	; 0x02
    2412:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2414:	eb e2       	ldi	r30, 0x2B	; 43
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    241c:	ea e2       	ldi	r30, 0x2A	; 42
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	88 e1       	ldi	r24, 0x18	; 24
    2422:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2424:	e0 e4       	ldi	r30, 0x40	; 64
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 e8       	ldi	r24, 0x80	; 128
    242a:	80 83       	st	Z, r24
	/* Configure the Parity bits */
	CLEAR_BIT(UCSRC,UPM0);
    242c:	a0 e4       	ldi	r26, 0x40	; 64
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e0 e4       	ldi	r30, 0x40	; 64
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	8f 7e       	andi	r24, 0xEF	; 239
    2438:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1);
    243a:	a0 e4       	ldi	r26, 0x40	; 64
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	e0 e4       	ldi	r30, 0x40	; 64
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	8f 7d       	andi	r24, 0xDF	; 223
    2446:	8c 93       	st	X, r24
	UCSRC = (UCSRC)|((ConfigPtr->parity)<<4);
    2448:	a0 e4       	ldi	r26, 0x40	; 64
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e0 e4       	ldi	r30, 0x40	; 64
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	28 2f       	mov	r18, r24
    2454:	eb 81       	ldd	r30, Y+3	; 0x03
    2456:	fc 81       	ldd	r31, Y+4	; 0x04
    2458:	81 81       	ldd	r24, Z+1	; 0x01
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	82 95       	swap	r24
    2460:	92 95       	swap	r25
    2462:	90 7f       	andi	r25, 0xF0	; 240
    2464:	98 27       	eor	r25, r24
    2466:	80 7f       	andi	r24, 0xF0	; 240
    2468:	98 27       	eor	r25, r24
    246a:	82 2b       	or	r24, r18
    246c:	8c 93       	st	X, r24
	/* Configure the Stop bit */
	CLEAR_BIT(UCSRC,USBS);
    246e:	a0 e4       	ldi	r26, 0x40	; 64
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e0 e4       	ldi	r30, 0x40	; 64
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	87 7f       	andi	r24, 0xF7	; 247
    247a:	8c 93       	st	X, r24
	UCSRC=(UCSRC)|(ConfigPtr->stop_bit<<3);
    247c:	a0 e4       	ldi	r26, 0x40	; 64
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e0 e4       	ldi	r30, 0x40	; 64
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	28 2f       	mov	r18, r24
    2488:	eb 81       	ldd	r30, Y+3	; 0x03
    248a:	fc 81       	ldd	r31, Y+4	; 0x04
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	88 0f       	add	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	82 2b       	or	r24, r18
    24a0:	8c 93       	st	X, r24
	/* Configure the Character Size */
	CLEAR_BIT(UCSRC,UCSZ0);
    24a2:	a0 e4       	ldi	r26, 0x40	; 64
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e0 e4       	ldi	r30, 0x40	; 64
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	8d 7f       	andi	r24, 0xFD	; 253
    24ae:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    24b0:	a0 e4       	ldi	r26, 0x40	; 64
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e0 e4       	ldi	r30, 0x40	; 64
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	8b 7f       	andi	r24, 0xFB	; 251
    24bc:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
    24be:	aa e2       	ldi	r26, 0x2A	; 42
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	ea e2       	ldi	r30, 0x2A	; 42
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	8b 7f       	andi	r24, 0xFB	; 251
    24ca:	8c 93       	st	X, r24
	if (ConfigPtr->bit_data==9)
    24cc:	eb 81       	ldd	r30, Y+3	; 0x03
    24ce:	fc 81       	ldd	r31, Y+4	; 0x04
    24d0:	80 81       	ld	r24, Z
    24d2:	89 30       	cpi	r24, 0x09	; 9
    24d4:	b1 f4       	brne	.+44     	; 0x2502 <UART_init+0x102>
	{
		SET_BIT(UCSRC,UCSZ0);
    24d6:	a0 e4       	ldi	r26, 0x40	; 64
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e0 e4       	ldi	r30, 0x40	; 64
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	82 60       	ori	r24, 0x02	; 2
    24e2:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    24e4:	a0 e4       	ldi	r26, 0x40	; 64
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e0 e4       	ldi	r30, 0x40	; 64
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	84 60       	ori	r24, 0x04	; 4
    24f0:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    24f2:	aa e2       	ldi	r26, 0x2A	; 42
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ea e2       	ldi	r30, 0x2A	; 42
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	84 60       	ori	r24, 0x04	; 4
    24fe:	8c 93       	st	X, r24
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <UART_init+0x120>

	}
	else
	{
		UCSRC|=(ConfigPtr->bit_data<<1);
    2502:	a0 e4       	ldi	r26, 0x40	; 64
    2504:	b0 e0       	ldi	r27, 0x00	; 0
    2506:	e0 e4       	ldi	r30, 0x40	; 64
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	80 81       	ld	r24, Z
    250c:	28 2f       	mov	r18, r24
    250e:	eb 81       	ldd	r30, Y+3	; 0x03
    2510:	fc 81       	ldd	r31, Y+4	; 0x04
    2512:	80 81       	ld	r24, Z
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	82 2b       	or	r24, r18
    251e:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ConfigPtr->baud_rate * 8UL))) - 1);
    2520:	eb 81       	ldd	r30, Y+3	; 0x03
    2522:	fc 81       	ldd	r31, Y+4	; 0x04
    2524:	83 81       	ldd	r24, Z+3	; 0x03
    2526:	94 81       	ldd	r25, Z+4	; 0x04
    2528:	a5 81       	ldd	r26, Z+5	; 0x05
    252a:	b6 81       	ldd	r27, Z+6	; 0x06
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	aa 1f       	adc	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	aa 1f       	adc	r26, r26
    253a:	bb 1f       	adc	r27, r27
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	aa 1f       	adc	r26, r26
    2542:	bb 1f       	adc	r27, r27
    2544:	9c 01       	movw	r18, r24
    2546:	ad 01       	movw	r20, r26
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	92 e1       	ldi	r25, 0x12	; 18
    254c:	aa e7       	ldi	r26, 0x7A	; 122
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 55 13 	call	0x26aa	; 0x26aa <__udivmodsi4>
    2558:	da 01       	movw	r26, r20
    255a:	c9 01       	movw	r24, r18
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2562:	e0 e4       	ldi	r30, 0x40	; 64
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	89 2f       	mov	r24, r25
    256c:	99 27       	eor	r25, r25
    256e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2570:	e9 e2       	ldi	r30, 0x29	; 41
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	80 83       	st	Z, r24
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2592:	eb e2       	ldi	r30, 0x2B	; 43
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	80 72       	andi	r24, 0x20	; 32
    259e:	90 70       	andi	r25, 0x00	; 0
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	b9 f3       	breq	.-18     	; 0x2592 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    25a4:	ec e2       	ldi	r30, 0x2C	; 44
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    25bc:	eb e2       	ldi	r30, 0x2B	; 43
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	88 23       	and	r24, r24
    25c4:	dc f7       	brge	.-10     	; 0x25bc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    25c6:	ec e2       	ldi	r30, 0x2C	; 44
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <UART_sendString+0x6>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	0e 94 c3 12 	call	0x2586	; 0x2586 <UART_sendByte>
		i++;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	39 f7       	brne	.-50     	; 0x25e6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <UART_receiveString+0xa>
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9b 83       	std	Y+3, r25	; 0x03
    2636:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2638:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	8c 01       	movw	r16, r24
    2646:	02 0f       	add	r16, r18
    2648:	13 1f       	adc	r17, r19
    264a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <UART_recieveByte>
    264e:	f8 01       	movw	r30, r16
    2650:	80 83       	st	Z, r24
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	8c 01       	movw	r16, r24
    2666:	02 0f       	add	r16, r18
    2668:	13 1f       	adc	r17, r19
    266a:	0e 94 da 12 	call	0x25b4	; 0x25b4 <UART_recieveByte>
    266e:	f8 01       	movw	r30, r16
    2670:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	9b 81       	ldd	r25, Y+3	; 0x03
    267c:	fc 01       	movw	r30, r24
    267e:	e2 0f       	add	r30, r18
    2680:	f3 1f       	adc	r31, r19
    2682:	80 81       	ld	r24, Z
    2684:	83 32       	cpi	r24, 0x23	; 35
    2686:	31 f7       	brne	.-52     	; 0x2654 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	10 82       	st	Z, r1
}
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <__udivmodsi4>:
    26aa:	a1 e2       	ldi	r26, 0x21	; 33
    26ac:	1a 2e       	mov	r1, r26
    26ae:	aa 1b       	sub	r26, r26
    26b0:	bb 1b       	sub	r27, r27
    26b2:	fd 01       	movw	r30, r26
    26b4:	0d c0       	rjmp	.+26     	; 0x26d0 <__udivmodsi4_ep>

000026b6 <__udivmodsi4_loop>:
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	ee 1f       	adc	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	a2 17       	cp	r26, r18
    26c0:	b3 07       	cpc	r27, r19
    26c2:	e4 07       	cpc	r30, r20
    26c4:	f5 07       	cpc	r31, r21
    26c6:	20 f0       	brcs	.+8      	; 0x26d0 <__udivmodsi4_ep>
    26c8:	a2 1b       	sub	r26, r18
    26ca:	b3 0b       	sbc	r27, r19
    26cc:	e4 0b       	sbc	r30, r20
    26ce:	f5 0b       	sbc	r31, r21

000026d0 <__udivmodsi4_ep>:
    26d0:	66 1f       	adc	r22, r22
    26d2:	77 1f       	adc	r23, r23
    26d4:	88 1f       	adc	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	1a 94       	dec	r1
    26da:	69 f7       	brne	.-38     	; 0x26b6 <__udivmodsi4_loop>
    26dc:	60 95       	com	r22
    26de:	70 95       	com	r23
    26e0:	80 95       	com	r24
    26e2:	90 95       	com	r25
    26e4:	9b 01       	movw	r18, r22
    26e6:	ac 01       	movw	r20, r24
    26e8:	bd 01       	movw	r22, r26
    26ea:	cf 01       	movw	r24, r30
    26ec:	08 95       	ret

000026ee <__prologue_saves__>:
    26ee:	2f 92       	push	r2
    26f0:	3f 92       	push	r3
    26f2:	4f 92       	push	r4
    26f4:	5f 92       	push	r5
    26f6:	6f 92       	push	r6
    26f8:	7f 92       	push	r7
    26fa:	8f 92       	push	r8
    26fc:	9f 92       	push	r9
    26fe:	af 92       	push	r10
    2700:	bf 92       	push	r11
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	ca 1b       	sub	r28, r26
    2718:	db 0b       	sbc	r29, r27
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	09 94       	ijmp

00002726 <__epilogue_restores__>:
    2726:	2a 88       	ldd	r2, Y+18	; 0x12
    2728:	39 88       	ldd	r3, Y+17	; 0x11
    272a:	48 88       	ldd	r4, Y+16	; 0x10
    272c:	5f 84       	ldd	r5, Y+15	; 0x0f
    272e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2730:	7d 84       	ldd	r7, Y+13	; 0x0d
    2732:	8c 84       	ldd	r8, Y+12	; 0x0c
    2734:	9b 84       	ldd	r9, Y+11	; 0x0b
    2736:	aa 84       	ldd	r10, Y+10	; 0x0a
    2738:	b9 84       	ldd	r11, Y+9	; 0x09
    273a:	c8 84       	ldd	r12, Y+8	; 0x08
    273c:	df 80       	ldd	r13, Y+7	; 0x07
    273e:	ee 80       	ldd	r14, Y+6	; 0x06
    2740:	fd 80       	ldd	r15, Y+5	; 0x05
    2742:	0c 81       	ldd	r16, Y+4	; 0x04
    2744:	1b 81       	ldd	r17, Y+3	; 0x03
    2746:	aa 81       	ldd	r26, Y+2	; 0x02
    2748:	b9 81       	ldd	r27, Y+1	; 0x01
    274a:	ce 0f       	add	r28, r30
    274c:	d1 1d       	adc	r29, r1
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	ed 01       	movw	r28, r26
    275a:	08 95       	ret

0000275c <_exit>:
    275c:	f8 94       	cli

0000275e <__stop_program>:
    275e:	ff cf       	rjmp	.-2      	; 0x275e <__stop_program>
