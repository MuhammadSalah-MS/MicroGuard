
HMI_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00002e4a  00002ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800136  00800136  00002fb4  2**0
                  ALLOC
  3 .stab         00002a9c  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a0  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000071df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a325  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b2a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b428  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e2       	ldi	r26, 0x20	; 32
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e2       	ldi	r24, 0x20	; 32
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 16 	jmp	0x2d5e	; 0x2d5e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e2       	ldi	r22, 0x20	; 32
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
uint8 password_Checker();
void sendPassword();

/* Main Function */
int main()
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	c5 54       	subi	r28, 0x45	; 69
     ca8:	d0 40       	sbci	r29, 0x00	; 0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7); /* Enable Global Interrupts */
     cb4:	af e5       	ldi	r26, 0x5F	; 95
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e5       	ldi	r30, 0x5F	; 95
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24


	/* Drivers Configurations & Initialization */
	uint8 password_created=0;
     cc2:	19 ae       	std	Y+57, r1	; 0x39
	UART_ConfigType UART_Configurations = {EIGTH_BITS,PARITRY_DISABLED,STOP_ONEBIT ,BAUD_9600 };
     cc4:	ce 01       	movw	r24, r28
     cc6:	ca 96       	adiw	r24, 0x3a	; 58
     cc8:	23 96       	adiw	r28, 0x03	; 3
     cca:	9f af       	std	Y+63, r25	; 0x3f
     ccc:	8e af       	std	Y+62, r24	; 0x3e
     cce:	23 97       	sbiw	r28, 0x03	; 3
     cd0:	ee e2       	ldi	r30, 0x2E	; 46
     cd2:	f1 e0       	ldi	r31, 0x01	; 1
     cd4:	25 96       	adiw	r28, 0x05	; 5
     cd6:	ff af       	std	Y+63, r31	; 0x3f
     cd8:	ee af       	std	Y+62, r30	; 0x3e
     cda:	25 97       	sbiw	r28, 0x05	; 5
     cdc:	f7 e0       	ldi	r31, 0x07	; 7
     cde:	26 96       	adiw	r28, 0x06	; 6
     ce0:	ff af       	std	Y+63, r31	; 0x3f
     ce2:	26 97       	sbiw	r28, 0x06	; 6
     ce4:	25 96       	adiw	r28, 0x05	; 5
     ce6:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce8:	ff ad       	ldd	r31, Y+63	; 0x3f
     cea:	25 97       	sbiw	r28, 0x05	; 5
     cec:	00 80       	ld	r0, Z
     cee:	25 96       	adiw	r28, 0x05	; 5
     cf0:	8e ad       	ldd	r24, Y+62	; 0x3e
     cf2:	9f ad       	ldd	r25, Y+63	; 0x3f
     cf4:	25 97       	sbiw	r28, 0x05	; 5
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	25 96       	adiw	r28, 0x05	; 5
     cfa:	9f af       	std	Y+63, r25	; 0x3f
     cfc:	8e af       	std	Y+62, r24	; 0x3e
     cfe:	25 97       	sbiw	r28, 0x05	; 5
     d00:	23 96       	adiw	r28, 0x03	; 3
     d02:	ee ad       	ldd	r30, Y+62	; 0x3e
     d04:	ff ad       	ldd	r31, Y+63	; 0x3f
     d06:	23 97       	sbiw	r28, 0x03	; 3
     d08:	00 82       	st	Z, r0
     d0a:	23 96       	adiw	r28, 0x03	; 3
     d0c:	8e ad       	ldd	r24, Y+62	; 0x3e
     d0e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d10:	23 97       	sbiw	r28, 0x03	; 3
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	23 96       	adiw	r28, 0x03	; 3
     d16:	9f af       	std	Y+63, r25	; 0x3f
     d18:	8e af       	std	Y+62, r24	; 0x3e
     d1a:	23 97       	sbiw	r28, 0x03	; 3
     d1c:	26 96       	adiw	r28, 0x06	; 6
     d1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d20:	26 97       	sbiw	r28, 0x06	; 6
     d22:	91 50       	subi	r25, 0x01	; 1
     d24:	26 96       	adiw	r28, 0x06	; 6
     d26:	9f af       	std	Y+63, r25	; 0x3f
     d28:	26 97       	sbiw	r28, 0x06	; 6
     d2a:	26 96       	adiw	r28, 0x06	; 6
     d2c:	ef ad       	ldd	r30, Y+63	; 0x3f
     d2e:	26 97       	sbiw	r28, 0x06	; 6
     d30:	ee 23       	and	r30, r30
     d32:	c1 f6       	brne	.-80     	; 0xce4 <main+0x46>
	UART_init(&UART_Configurations);
     d34:	ce 01       	movw	r24, r28
     d36:	ca 96       	adiw	r24, 0x3a	; 58
     d38:	0e 94 29 15 	call	0x2a52	; 0x2a52 <UART_init>
	LCD_init();
     d3c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <LCD_init>

	/* Local Variables Declarations */
	uint8 state=0;
     d40:	18 ae       	std	Y+56, r1	; 0x38
	uint8 operation_in=0;
     d42:	1f aa       	std	Y+55, r1	; 0x37

	if (!password_created)
     d44:	89 ad       	ldd	r24, Y+57	; 0x39
     d46:	88 23       	and	r24, r24
     d48:	19 f4       	brne	.+6      	; 0xd50 <main+0xb2>
	{
		state=CREATE_PASS;
     d4a:	81 e4       	ldi	r24, 0x41	; 65
     d4c:	88 af       	std	Y+56, r24	; 0x38
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <main+0xb6>
	}
	else {
		state=MAIN_OPTIONS;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	88 af       	std	Y+56, r24	; 0x38


	while (1)
	{

		if (state==CREATE_PASS) /* First State for first time entry */
     d54:	88 ad       	ldd	r24, Y+56	; 0x38
     d56:	81 34       	cpi	r24, 0x41	; 65
     d58:	09 f0       	breq	.+2      	; 0xd5c <main+0xbe>
     d5a:	f9 c0       	rjmp	.+498    	; 0xf4e <main+0x2b0>
		{
			LCD_clearScreen();
     d5c:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pls Enter New");
     d60:	20 e6       	ldi	r18, 0x60	; 96
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	a9 01       	movw	r20, r18
     d6a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Password:");
     d6e:	2e e6       	ldi	r18, 0x6E	; 110
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,9); /* Adjust password place */
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	69 e0       	ldi	r22, 0x09	; 9
     d80:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_moveCursor>
			UART_sendByte(CREATE_PASS);  /* Inform the Control ECU */
     d84:	81 e4       	ldi	r24, 0x41	; 65
     d86:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
			sendPassword();		 /* Receive Password , And send to Control */
     d8a:	0e 94 90 09 	call	0x1320	; 0x1320 <sendPassword>
			LCD_clearScreen();
     d8e:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pls Re-Enter the     ");
     d92:	28 e7       	ldi	r18, 0x78	; 120
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	a9 01       	movw	r20, r18
     d9c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"same pass:");
     da0:	2e e8       	ldi	r18, 0x8E	; 142
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	a9 01       	movw	r20, r18
     daa:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e2       	ldi	r26, 0x20	; 32
     db4:	b1 e4       	ldi	r27, 0x41	; 65
     db6:	89 ab       	std	Y+49, r24	; 0x31
     db8:	9a ab       	std	Y+50, r25	; 0x32
     dba:	ab ab       	std	Y+51, r26	; 0x33
     dbc:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     dbe:	69 a9       	ldd	r22, Y+49	; 0x31
     dc0:	7a a9       	ldd	r23, Y+50	; 0x32
     dc2:	8b a9       	ldd	r24, Y+51	; 0x33
     dc4:	9c a9       	ldd	r25, Y+52	; 0x34
     dc6:	2b ea       	ldi	r18, 0xAB	; 171
     dc8:	3a ea       	ldi	r19, 0xAA	; 170
     dca:	4a e2       	ldi	r20, 0x2A	; 42
     dcc:	50 e4       	ldi	r21, 0x40	; 64
     dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8d a7       	std	Y+45, r24	; 0x2d
     dd8:	9e a7       	std	Y+46, r25	; 0x2e
     dda:	af a7       	std	Y+47, r26	; 0x2f
     ddc:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     dde:	6d a5       	ldd	r22, Y+45	; 0x2d
     de0:	7e a5       	ldd	r23, Y+46	; 0x2e
     de2:	8f a5       	ldd	r24, Y+47	; 0x2f
     de4:	98 a9       	ldd	r25, Y+48	; 0x30
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	1c f4       	brge	.+6      	; 0xdfc <main+0x15e>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8c a7       	std	Y+44, r24	; 0x2c
     dfa:	91 c0       	rjmp	.+290    	; 0xf1e <main+0x280>
	else if (__tmp > 255)
     dfc:	6d a5       	ldd	r22, Y+45	; 0x2d
     dfe:	7e a5       	ldd	r23, Y+46	; 0x2e
     e00:	8f a5       	ldd	r24, Y+47	; 0x2f
     e02:	98 a9       	ldd	r25, Y+48	; 0x30
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	53 e4       	ldi	r21, 0x43	; 67
     e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	0c f0       	brlt	.+2      	; 0xe16 <main+0x178>
     e14:	7b c0       	rjmp	.+246    	; 0xf0c <main+0x26e>
	{
		_delay_ms(__us / 1000.0);
     e16:	69 a9       	ldd	r22, Y+49	; 0x31
     e18:	7a a9       	ldd	r23, Y+50	; 0x32
     e1a:	8b a9       	ldd	r24, Y+51	; 0x33
     e1c:	9c a9       	ldd	r25, Y+52	; 0x34
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a e7       	ldi	r20, 0x7A	; 122
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	88 a7       	std	Y+40, r24	; 0x28
     e30:	99 a7       	std	Y+41, r25	; 0x29
     e32:	aa a7       	std	Y+42, r26	; 0x2a
     e34:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e36:	68 a5       	ldd	r22, Y+40	; 0x28
     e38:	79 a5       	ldd	r23, Y+41	; 0x29
     e3a:	8a a5       	ldd	r24, Y+42	; 0x2a
     e3c:	9b a5       	ldd	r25, Y+43	; 0x2b
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	4a ef       	ldi	r20, 0xFA	; 250
     e44:	54 e4       	ldi	r21, 0x44	; 68
     e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	8c a3       	std	Y+36, r24	; 0x24
     e50:	9d a3       	std	Y+37, r25	; 0x25
     e52:	ae a3       	std	Y+38, r26	; 0x26
     e54:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
     e56:	6c a1       	ldd	r22, Y+36	; 0x24
     e58:	7d a1       	ldd	r23, Y+37	; 0x25
     e5a:	8e a1       	ldd	r24, Y+38	; 0x26
     e5c:	9f a1       	ldd	r25, Y+39	; 0x27
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e8       	ldi	r20, 0x80	; 128
     e64:	5f e3       	ldi	r21, 0x3F	; 63
     e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e6a:	88 23       	and	r24, r24
     e6c:	2c f4       	brge	.+10     	; 0xe78 <main+0x1da>
		__ticks = 1;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9b a3       	std	Y+35, r25	; 0x23
     e74:	8a a3       	std	Y+34, r24	; 0x22
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <main+0x258>
	else if (__tmp > 65535)
     e78:	6c a1       	ldd	r22, Y+36	; 0x24
     e7a:	7d a1       	ldd	r23, Y+37	; 0x25
     e7c:	8e a1       	ldd	r24, Y+38	; 0x26
     e7e:	9f a1       	ldd	r25, Y+39	; 0x27
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	3f ef       	ldi	r19, 0xFF	; 255
     e84:	4f e7       	ldi	r20, 0x7F	; 127
     e86:	57 e4       	ldi	r21, 0x47	; 71
     e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e8c:	18 16       	cp	r1, r24
     e8e:	4c f5       	brge	.+82     	; 0xee2 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e90:	68 a5       	ldd	r22, Y+40	; 0x28
     e92:	79 a5       	ldd	r23, Y+41	; 0x29
     e94:	8a a5       	ldd	r24, Y+42	; 0x2a
     e96:	9b a5       	ldd	r25, Y+43	; 0x2b
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e2       	ldi	r20, 0x20	; 32
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	9b a3       	std	Y+35, r25	; 0x23
     eb6:	8a a3       	std	Y+34, r24	; 0x22
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <main+0x23a>
     eba:	88 ec       	ldi	r24, 0xC8	; 200
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	99 a3       	std	Y+33, r25	; 0x21
     ec0:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec2:	88 a1       	ldd	r24, Y+32	; 0x20
     ec4:	99 a1       	ldd	r25, Y+33	; 0x21
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <main+0x228>
     eca:	99 a3       	std	Y+33, r25	; 0x21
     ecc:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	8a a1       	ldd	r24, Y+34	; 0x22
     ed0:	9b a1       	ldd	r25, Y+35	; 0x23
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	9b a3       	std	Y+35, r25	; 0x23
     ed6:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	8a a1       	ldd	r24, Y+34	; 0x22
     eda:	9b a1       	ldd	r25, Y+35	; 0x23
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	69 f7       	brne	.-38     	; 0xeba <main+0x21c>
     ee0:	24 c0       	rjmp	.+72     	; 0xf2a <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee2:	6c a1       	ldd	r22, Y+36	; 0x24
     ee4:	7d a1       	ldd	r23, Y+37	; 0x25
     ee6:	8e a1       	ldd	r24, Y+38	; 0x26
     ee8:	9f a1       	ldd	r25, Y+39	; 0x27
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	9b a3       	std	Y+35, r25	; 0x23
     ef4:	8a a3       	std	Y+34, r24	; 0x22
     ef6:	8a a1       	ldd	r24, Y+34	; 0x22
     ef8:	9b a1       	ldd	r25, Y+35	; 0x23
     efa:	9f 8f       	std	Y+31, r25	; 0x1f
     efc:	8e 8f       	std	Y+30, r24	; 0x1e
     efe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f00:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <main+0x264>
     f06:	9f 8f       	std	Y+31, r25	; 0x1f
     f08:	8e 8f       	std	Y+30, r24	; 0x1e
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <main+0x28c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f0c:	6d a5       	ldd	r22, Y+45	; 0x2d
     f0e:	7e a5       	ldd	r23, Y+46	; 0x2e
     f10:	8f a5       	ldd	r24, Y+47	; 0x2f
     f12:	98 a9       	ldd	r25, Y+48	; 0x30
     f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8c a7       	std	Y+44, r24	; 0x2c
     f1e:	8c a5       	ldd	r24, Y+44	; 0x2c
     f20:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f24:	8a 95       	dec	r24
     f26:	f1 f7       	brne	.-4      	; 0xf24 <main+0x286>
     f28:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_us(10);
			sendPassword();
     f2a:	0e 94 90 09 	call	0x1320	; 0x1320 <sendPassword>
			if (UART_recieveByte()==PASS_CREATED)
     f2e:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
     f32:	81 34       	cpi	r24, 0x41	; 65
     f34:	29 f4       	brne	.+10     	; 0xf40 <main+0x2a2>
			{
				password_created=1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	89 af       	std	Y+57, r24	; 0x39
				state=MAIN_OPTIONS; /* Change to Main Options if passwords received correctly */
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	88 af       	std	Y+56, r24	; 0x38
     f3e:	0a cf       	rjmp	.-492    	; 0xd54 <main+0xb6>
			}
			else
			{
				LCD_clearScreen();
     f40:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
				LCD_displayString("What the hell");
     f44:	89 e9       	ldi	r24, 0x99	; 153
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayString>
     f4c:	03 cf       	rjmp	.-506    	; 0xd54 <main+0xb6>
			}

		}

		else if (state==MAIN_OPTIONS)
     f4e:	88 ad       	ldd	r24, Y+56	; 0x38
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <main+0x2b8>
     f54:	41 c1       	rjmp	.+642    	; 0x11d8 <main+0x53a>
		{
			LCD_clearScreen();
     f56:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
			/* Display The Options */
			LCD_displayStringRowColumn(0,0,"+ : Open Door");
     f5a:	27 ea       	ldi	r18, 0xA7	; 167
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
     f68:	25 eb       	ldi	r18, 0xB5	; 181
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			operation_in=KEYPAD_getPressedKey(); /* Read the operation */
     f76:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <KEYPAD_getPressedKey>
     f7a:	8f ab       	std	Y+55, r24	; 0x37
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	a8 e4       	ldi	r26, 0x48	; 72
     f82:	b3 e4       	ldi	r27, 0x43	; 67
     f84:	89 8f       	std	Y+25, r24	; 0x19
     f86:	9a 8f       	std	Y+26, r25	; 0x1a
     f88:	ab 8f       	std	Y+27, r26	; 0x1b
     f8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8c:	69 8d       	ldd	r22, Y+25	; 0x19
     f8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	4a ef       	ldi	r20, 0xFA	; 250
     f9a:	54 e4       	ldi	r21, 0x44	; 68
     f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	8d 8b       	std	Y+21, r24	; 0x15
     fa6:	9e 8b       	std	Y+22, r25	; 0x16
     fa8:	af 8b       	std	Y+23, r26	; 0x17
     faa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fac:	6d 89       	ldd	r22, Y+21	; 0x15
     fae:	7e 89       	ldd	r23, Y+22	; 0x16
     fb0:	8f 89       	ldd	r24, Y+23	; 0x17
     fb2:	98 8d       	ldd	r25, Y+24	; 0x18
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e8       	ldi	r20, 0x80	; 128
     fba:	5f e3       	ldi	r21, 0x3F	; 63
     fbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	2c f4       	brge	.+10     	; 0xfce <main+0x330>
		__ticks = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 8b       	std	Y+20, r25	; 0x14
     fca:	8b 8b       	std	Y+19, r24	; 0x13
     fcc:	3f c0       	rjmp	.+126    	; 0x104c <main+0x3ae>
	else if (__tmp > 65535)
     fce:	6d 89       	ldd	r22, Y+21	; 0x15
     fd0:	7e 89       	ldd	r23, Y+22	; 0x16
     fd2:	8f 89       	ldd	r24, Y+23	; 0x17
     fd4:	98 8d       	ldd	r25, Y+24	; 0x18
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	3f ef       	ldi	r19, 0xFF	; 255
     fda:	4f e7       	ldi	r20, 0x7F	; 127
     fdc:	57 e4       	ldi	r21, 0x47	; 71
     fde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	4c f5       	brge	.+82     	; 0x1038 <main+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe6:	69 8d       	ldd	r22, Y+25	; 0x19
     fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e2       	ldi	r20, 0x20	; 32
     ff4:	51 e4       	ldi	r21, 0x41	; 65
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9c 8b       	std	Y+20, r25	; 0x14
    100c:	8b 8b       	std	Y+19, r24	; 0x13
    100e:	0f c0       	rjmp	.+30     	; 0x102e <main+0x390>
    1010:	88 ec       	ldi	r24, 0xC8	; 200
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9a 8b       	std	Y+18, r25	; 0x12
    1016:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1018:	89 89       	ldd	r24, Y+17	; 0x11
    101a:	9a 89       	ldd	r25, Y+18	; 0x12
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <main+0x37e>
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1024:	8b 89       	ldd	r24, Y+19	; 0x13
    1026:	9c 89       	ldd	r25, Y+20	; 0x14
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9c 8b       	std	Y+20, r25	; 0x14
    102c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	8b 89       	ldd	r24, Y+19	; 0x13
    1030:	9c 89       	ldd	r25, Y+20	; 0x14
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	69 f7       	brne	.-38     	; 0x1010 <main+0x372>
    1036:	91 c0       	rjmp	.+290    	; 0x115a <main+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1038:	6d 89       	ldd	r22, Y+21	; 0x15
    103a:	7e 89       	ldd	r23, Y+22	; 0x16
    103c:	8f 89       	ldd	r24, Y+23	; 0x17
    103e:	98 8d       	ldd	r25, Y+24	; 0x18
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	98 8b       	std	Y+16, r25	; 0x10
    1052:	8f 87       	std	Y+15, r24	; 0x0f
    1054:	8f 85       	ldd	r24, Y+15	; 0x0f
    1056:	98 89       	ldd	r25, Y+16	; 0x10
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <main+0x3ba>
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	7c c0       	rjmp	.+248    	; 0x115a <main+0x4bc>
			_delay_ms(200);
			/* Reject any other input buttons except + and - */
			while (operation_in!='+'&&operation_in!='-')
			{
				LCD_moveCursor(1,15);
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	6f e0       	ldi	r22, 0x0F	; 15
    1066:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_moveCursor>
				operation_in=KEYPAD_getPressedKey();
    106a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <KEYPAD_getPressedKey>
    106e:	8f ab       	std	Y+55, r24	; 0x37
				LCD_displayCharacter(operation_in);
    1070:	8f a9       	ldd	r24, Y+55	; 0x37
    1072:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_displayCharacter>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a8 e4       	ldi	r26, 0x48	; 72
    107c:	b3 e4       	ldi	r27, 0x43	; 67
    107e:	8b 87       	std	Y+11, r24	; 0x0b
    1080:	9c 87       	std	Y+12, r25	; 0x0c
    1082:	ad 87       	std	Y+13, r26	; 0x0d
    1084:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a ef       	ldi	r20, 0xFA	; 250
    1094:	54 e4       	ldi	r21, 0x44	; 68
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8f 83       	std	Y+7, r24	; 0x07
    10a0:	98 87       	std	Y+8, r25	; 0x08
    10a2:	a9 87       	std	Y+9, r26	; 0x09
    10a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	78 85       	ldd	r23, Y+8	; 0x08
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <main+0x42a>
		__ticks = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	3f c0       	rjmp	.+126    	; 0x1146 <main+0x4a8>
	else if (__tmp > 65535)
    10c8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ca:	78 85       	ldd	r23, Y+8	; 0x08
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	3f ef       	ldi	r19, 0xFF	; 255
    10d4:	4f e7       	ldi	r20, 0x7F	; 127
    10d6:	57 e4       	ldi	r21, 0x47	; 71
    10d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10dc:	18 16       	cp	r1, r24
    10de:	4c f5       	brge	.+82     	; 0x1132 <main+0x494>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e2       	ldi	r20, 0x20	; 32
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	bc 01       	movw	r22, r24
    10fa:	cd 01       	movw	r24, r26
    10fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	0f c0       	rjmp	.+30     	; 0x1128 <main+0x48a>
    110a:	88 ec       	ldi	r24, 0xC8	; 200
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <main+0x478>
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	69 f7       	brne	.-38     	; 0x110a <main+0x46c>
    1130:	14 c0       	rjmp	.+40     	; 0x115a <main+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1132:	6f 81       	ldd	r22, Y+7	; 0x07
    1134:	78 85       	ldd	r23, Y+8	; 0x08
    1136:	89 85       	ldd	r24, Y+9	; 0x09
    1138:	9a 85       	ldd	r25, Y+10	; 0x0a
    113a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	9a 81       	ldd	r25, Y+2	; 0x02
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	f1 f7       	brne	.-4      	; 0x1152 <main+0x4b4>
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
			LCD_displayStringRowColumn(0,0,"+ : Open Door");
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
			operation_in=KEYPAD_getPressedKey(); /* Read the operation */
			_delay_ms(200);
			/* Reject any other input buttons except + and - */
			while (operation_in!='+'&&operation_in!='-')
    115a:	8f a9       	ldd	r24, Y+55	; 0x37
    115c:	8b 32       	cpi	r24, 0x2B	; 43
    115e:	21 f0       	breq	.+8      	; 0x1168 <main+0x4ca>
    1160:	8f a9       	ldd	r24, Y+55	; 0x37
    1162:	8d 32       	cpi	r24, 0x2D	; 45
    1164:	09 f0       	breq	.+2      	; 0x1168 <main+0x4ca>
    1166:	7d cf       	rjmp	.-262    	; 0x1062 <main+0x3c4>
				operation_in=KEYPAD_getPressedKey();
				LCD_displayCharacter(operation_in);
				_delay_ms(200);
			}
			/* Give three time to read password if not correct */
			for (uint8 i=0;i<3;i++)
    1168:	1e aa       	std	Y+54, r1	; 0x36
    116a:	1a c0       	rjmp	.+52     	; 0x11a0 <main+0x502>
			{
				if(password_Checker()==PASS_CHECKED)
    116c:	0e 94 48 09 	call	0x1290	; 0x1290 <password_Checker>
    1170:	82 34       	cpi	r24, 0x42	; 66
    1172:	71 f4       	brne	.+28     	; 0x1190 <main+0x4f2>
				{
					if (operation_in=='+')
    1174:	8f a9       	ldd	r24, Y+55	; 0x37
    1176:	8b 32       	cpi	r24, 0x2B	; 43
    1178:	19 f4       	brne	.+6      	; 0x1180 <main+0x4e2>
					{
						state=OPEN_DOOR;
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	88 af       	std	Y+56, r24	; 0x38
    117e:	05 c0       	rjmp	.+10     	; 0x118a <main+0x4ec>
					}
					else if (operation_in=='-')
    1180:	8f a9       	ldd	r24, Y+55	; 0x37
    1182:	8d 32       	cpi	r24, 0x2D	; 45
    1184:	11 f4       	brne	.+4      	; 0x118a <main+0x4ec>
					{
						state=CHANGE_PASSWORD;
    1186:	84 e4       	ldi	r24, 0x44	; 68
    1188:	88 af       	std	Y+56, r24	; 0x38
					}
					unmatched_count=0;
    118a:	10 92 37 01 	sts	0x0137, r1
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <main+0x508>
					break; /* break if password is correct */
				}
				else {

					unmatched_count++;
    1190:	80 91 37 01 	lds	r24, 0x0137
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	80 93 37 01 	sts	0x0137, r24
				operation_in=KEYPAD_getPressedKey();
				LCD_displayCharacter(operation_in);
				_delay_ms(200);
			}
			/* Give three time to read password if not correct */
			for (uint8 i=0;i<3;i++)
    119a:	8e a9       	ldd	r24, Y+54	; 0x36
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	8e ab       	std	Y+54, r24	; 0x36
    11a0:	8e a9       	ldd	r24, Y+54	; 0x36
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	18 f3       	brcs	.-58     	; 0x116c <main+0x4ce>
					unmatched_count++;

				}
			}

			if (unmatched_count==3)
    11a6:	80 91 37 01 	lds	r24, 0x0137
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <main+0x512>
    11ae:	d2 cd       	rjmp	.-1116   	; 0xd54 <main+0xb6>
			{
				UART_sendByte(THREE_UMATCHED_PASS);
    11b0:	85 e4       	ldi	r24, 0x45	; 69
    11b2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
				LCD_clearScreen();
    11b6:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,5,"Error!!");
    11ba:	25 ec       	ldi	r18, 0xC5	; 197
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	65 e0       	ldi	r22, 0x05	; 5
    11c2:	a9 01       	movw	r20, r18
    11c4:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
				Timer1_delay(60);
    11c8:	8c e3       	ldi	r24, 0x3C	; 60
    11ca:	0e 94 73 09 	call	0x12e6	; 0x12e6 <Timer1_delay>
				unmatched_count=0;
    11ce:	10 92 37 01 	sts	0x0137, r1
				state=MAIN_OPTIONS;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	88 af       	std	Y+56, r24	; 0x38
    11d6:	be cd       	rjmp	.-1156   	; 0xd54 <main+0xb6>

			}

		}

		else if (state==OPEN_DOOR)
    11d8:	88 ad       	ldd	r24, Y+56	; 0x38
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	d9 f5       	brne	.+118    	; 0x1254 <main+0x5b6>
		{
			UART_sendByte(UNLOCK_MOTOR);
    11de:	83 e4       	ldi	r24, 0x43	; 67
    11e0:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
			uint8 screen_status;
			screen_status=UART_recieveByte();
    11e4:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    11e8:	8d ab       	std	Y+53, r24	; 0x35
			if (screen_status==MOTOR_UNLOCKED)
    11ea:	8d a9       	ldd	r24, Y+53	; 0x35
    11ec:	83 34       	cpi	r24, 0x43	; 67
    11ee:	81 f4       	brne	.+32     	; 0x1210 <main+0x572>
			{
				LCD_clearScreen();
    11f0:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Door is");
    11f4:	2d ec       	ldi	r18, 0xCD	; 205
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Un-lokcing");
    1202:	25 ed       	ldi	r18, 0xD5	; 213
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			}
			screen_status = UART_recieveByte();
    1210:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    1214:	8d ab       	std	Y+53, r24	; 0x35
			if (screen_status==MOTOR_OPENED)
    1216:	8d a9       	ldd	r24, Y+53	; 0x35
    1218:	81 35       	cpi	r24, 0x51	; 81
    121a:	31 f4       	brne	.+12     	; 0x1228 <main+0x58a>
			{
				LCD_clearScreen();
    121c:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
				LCD_displayString("Door is Open");
    1220:	80 ee       	ldi	r24, 0xE0	; 224
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayString>

			}
			screen_status = UART_recieveByte();
    1228:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    122c:	8d ab       	std	Y+53, r24	; 0x35
			if (screen_status==MOTOR_LOCKED)
    122e:	8d a9       	ldd	r24, Y+53	; 0x35
    1230:	87 35       	cpi	r24, 0x57	; 87
    1232:	31 f4       	brne	.+12     	; 0x1240 <main+0x5a2>
			{
				LCD_clearScreen();
    1234:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
				LCD_displayString("Door is Locking");
    1238:	8d ee       	ldi	r24, 0xED	; 237
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayString>
			}
			screen_status = UART_recieveByte();
    1240:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    1244:	8d ab       	std	Y+53, r24	; 0x35
			if (screen_status==DOOR_FINISH)
    1246:	8d a9       	ldd	r24, Y+53	; 0x35
    1248:	82 35       	cpi	r24, 0x52	; 82
    124a:	09 f0       	breq	.+2      	; 0x124e <main+0x5b0>
    124c:	83 cd       	rjmp	.-1274   	; 0xd54 <main+0xb6>
			{
				state=MAIN_OPTIONS;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	88 af       	std	Y+56, r24	; 0x38
    1252:	80 cd       	rjmp	.-1280   	; 0xd54 <main+0xb6>
			}
		}
		else if (state==CHANGE_PASSWORD)
    1254:	88 ad       	ldd	r24, Y+56	; 0x38
    1256:	84 34       	cpi	r24, 0x44	; 68
    1258:	09 f0       	breq	.+2      	; 0x125c <main+0x5be>
    125a:	7c cd       	rjmp	.-1288   	; 0xd54 <main+0xb6>
		{

			LCD_clearScreen();
    125c:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pls re-Enter Pass ");
    1260:	2d ef       	ldi	r18, 0xFD	; 253
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
			LCD_moveCursor(1,0);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_moveCursor>
			UART_sendByte(CHANGE_PASSWORD);
    1276:	84 e4       	ldi	r24, 0x44	; 68
    1278:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
			sendPassword();
    127c:	0e 94 90 09 	call	0x1320	; 0x1320 <sendPassword>
			if (UART_recieveByte()==PASSWORD_CHANGED)
    1280:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    1284:	84 34       	cpi	r24, 0x44	; 68
    1286:	09 f0       	breq	.+2      	; 0x128a <main+0x5ec>
    1288:	65 cd       	rjmp	.-1334   	; 0xd54 <main+0xb6>
			{
				state=CREATE_PASS;
    128a:	81 e4       	ldi	r24, 0x41	; 65
    128c:	88 af       	std	Y+56, r24	; 0x38
    128e:	62 cd       	rjmp	.-1340   	; 0xd54 <main+0xb6>

00001290 <password_Checker>:
	}

}

uint8 password_Checker()
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    129a:	0e 94 2b 14 	call	0x2856	; 0x2856 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
    129e:	20 e1       	ldi	r18, 0x10	; 16
    12a0:	31 e0       	ldi	r19, 0x01	; 1
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	a9 01       	movw	r20, r18
    12a8:	0e 94 ef 13 	call	0x27de	; 0x27de <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_moveCursor>
	UART_sendByte(CHECK_PASS);
    12b4:	82 e4       	ldi	r24, 0x42	; 66
    12b6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
	sendPassword();
    12ba:	0e 94 90 09 	call	0x1320	; 0x1320 <sendPassword>
	uint8 value;
	value=UART_recieveByte();
    12be:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    12c2:	89 83       	std	Y+1, r24	; 0x01
	return value;
    12c4:	89 81       	ldd	r24, Y+1	; 0x01

}
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <tickscalc>:

void tickscalc(void)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    12d6:	80 91 36 01 	lds	r24, 0x0136
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	80 93 36 01 	sts	0x0136, r24
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <Timer1_delay>:


void Timer1_delay(uint8 seconds)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&TIMER1_Configurations);
    12f2:	88 e2       	ldi	r24, 0x28	; 40
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	0e 94 9b 14 	call	0x2936	; 0x2936 <Timer1_init>
	Timer1_setCallBack(tickscalc);
    12fa:	87 e6       	ldi	r24, 0x67	; 103
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <Timer1_setCallBack>
	ticks=0;
    1302:	10 92 36 01 	sts	0x0136, r1
	while (ticks<=seconds); /* Do Nothing */
    1306:	90 91 36 01 	lds	r25, 0x0136
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	89 17       	cp	r24, r25
    130e:	d8 f7       	brcc	.-10     	; 0x1306 <Timer1_delay+0x20>
	Timer1_deinit();
    1310:	0e 94 09 15 	call	0x2a12	; 0x2a12 <Timer1_deinit>
	ticks=0;
    1314:	10 92 36 01 	sts	0x0136, r1

}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <sendPassword>:

void sendPassword()
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	67 97       	sbiw	r28, 0x17	; 23
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	uint8 password[7];
	for (int i=0;i<5;i++)
    1338:	18 8a       	std	Y+16, r1	; 0x10
    133a:	1f 86       	std	Y+15, r1	; 0x0f
    133c:	85 c0       	rjmp	.+266    	; 0x1448 <sendPassword+0x128>
	{
		password[i]=KEYPAD_getPressedKey();
    133e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1340:	18 89       	ldd	r17, Y+16	; 0x10
    1342:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <KEYPAD_getPressedKey>
    1346:	28 2f       	mov	r18, r24
    1348:	ce 01       	movw	r24, r28
    134a:	41 96       	adiw	r24, 0x11	; 17
    134c:	fc 01       	movw	r30, r24
    134e:	e0 0f       	add	r30, r16
    1350:	f1 1f       	adc	r31, r17
    1352:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    1354:	8a e2       	ldi	r24, 0x2A	; 42
    1356:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_displayCharacter>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	aa e7       	ldi	r26, 0x7A	; 122
    1360:	b3 e4       	ldi	r27, 0x43	; 67
    1362:	8b 87       	std	Y+11, r24	; 0x0b
    1364:	9c 87       	std	Y+12, r25	; 0x0c
    1366:	ad 87       	std	Y+13, r26	; 0x0d
    1368:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136a:	6b 85       	ldd	r22, Y+11	; 0x0b
    136c:	7c 85       	ldd	r23, Y+12	; 0x0c
    136e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1370:	9e 85       	ldd	r25, Y+14	; 0x0e
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4a ef       	ldi	r20, 0xFA	; 250
    1378:	54 e4       	ldi	r21, 0x44	; 68
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	8f 83       	std	Y+7, r24	; 0x07
    1384:	98 87       	std	Y+8, r25	; 0x08
    1386:	a9 87       	std	Y+9, r26	; 0x09
    1388:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138a:	6f 81       	ldd	r22, Y+7	; 0x07
    138c:	78 85       	ldd	r23, Y+8	; 0x08
    138e:	89 85       	ldd	r24, Y+9	; 0x09
    1390:	9a 85       	ldd	r25, Y+10	; 0x0a
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	2c f4       	brge	.+10     	; 0x13ac <sendPassword+0x8c>
		__ticks = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
    13aa:	3f c0       	rjmp	.+126    	; 0x142a <sendPassword+0x10a>
	else if (__tmp > 65535)
    13ac:	6f 81       	ldd	r22, Y+7	; 0x07
    13ae:	78 85       	ldd	r23, Y+8	; 0x08
    13b0:	89 85       	ldd	r24, Y+9	; 0x09
    13b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	4f e7       	ldi	r20, 0x7F	; 127
    13ba:	57 e4       	ldi	r21, 0x47	; 71
    13bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	4c f5       	brge	.+82     	; 0x1416 <sendPassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e2       	ldi	r20, 0x20	; 32
    13d2:	51 e4       	ldi	r21, 0x41	; 65
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	0f c0       	rjmp	.+30     	; 0x140c <sendPassword+0xec>
    13ee:	88 ec       	ldi	r24, 0xC8	; 200
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <sendPassword+0xda>
    13fe:	9c 83       	std	Y+4, r25	; 0x04
    1400:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140c:	8d 81       	ldd	r24, Y+5	; 0x05
    140e:	9e 81       	ldd	r25, Y+6	; 0x06
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	69 f7       	brne	.-38     	; 0x13ee <sendPassword+0xce>
    1414:	14 c0       	rjmp	.+40     	; 0x143e <sendPassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1416:	6f 81       	ldd	r22, Y+7	; 0x07
    1418:	78 85       	ldd	r23, Y+8	; 0x08
    141a:	89 85       	ldd	r24, Y+9	; 0x09
    141c:	9a 85       	ldd	r25, Y+10	; 0x0a
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <sendPassword+0x116>
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01
}

void sendPassword()
{
	uint8 password[7];
	for (int i=0;i<5;i++)
    143e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1440:	98 89       	ldd	r25, Y+16	; 0x10
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	98 8b       	std	Y+16, r25	; 0x10
    1446:	8f 87       	std	Y+15, r24	; 0x0f
    1448:	8f 85       	ldd	r24, Y+15	; 0x0f
    144a:	98 89       	ldd	r25, Y+16	; 0x10
    144c:	85 30       	cpi	r24, 0x05	; 5
    144e:	91 05       	cpc	r25, r1
    1450:	0c f4       	brge	.+2      	; 0x1454 <sendPassword+0x134>
    1452:	75 cf       	rjmp	.-278    	; 0x133e <sendPassword+0x1e>
	{
		password[i]=KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(250); /* Press time */
	}
	while (KEYPAD_getPressedKey()!='+'); /* Enter Sending Button */
    1454:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <KEYPAD_getPressedKey>
    1458:	8b 32       	cpi	r24, 0x2B	; 43
    145a:	e1 f7       	brne	.-8      	; 0x1454 <sendPassword+0x134>
	password[5]='#';
    145c:	83 e2       	ldi	r24, 0x23	; 35
    145e:	8e 8b       	std	Y+22, r24	; 0x16
	password[6]='\0';
    1460:	1f 8a       	std	Y+23, r1	; 0x17

	UART_sendString(password); /* Send Password To control unit */
    1462:	ce 01       	movw	r24, r28
    1464:	41 96       	adiw	r24, 0x11	; 17
    1466:	0e 94 19 16 	call	0x2c32	; 0x2c32 <UART_sendString>

}
    146a:	67 96       	adiw	r28, 0x17	; 23
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	08 95       	ret

00001480 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	00 d0       	rcall	.+0      	; 0x1486 <GPIO_setupPinDirection+0x6>
    1486:	00 d0       	rcall	.+0      	; 0x1488 <GPIO_setupPinDirection+0x8>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	6a 83       	std	Y+2, r22	; 0x02
    1492:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	08 f0       	brcs	.+2      	; 0x149c <GPIO_setupPinDirection+0x1c>
    149a:	d5 c0       	rjmp	.+426    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	08 f0       	brcs	.+2      	; 0x14a4 <GPIO_setupPinDirection+0x24>
    14a2:	d1 c0       	rjmp	.+418    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	3d 83       	std	Y+5, r19	; 0x05
    14ac:	2c 83       	std	Y+4, r18	; 0x04
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <GPIO_setupPinDirection+0x3a>
    14b8:	43 c0       	rjmp	.+134    	; 0x1540 <GPIO_setupPinDirection+0xc0>
    14ba:	2c 81       	ldd	r18, Y+4	; 0x04
    14bc:	3d 81       	ldd	r19, Y+5	; 0x05
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <GPIO_setupPinDirection+0x4e>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	71 f0       	breq	.+28     	; 0x14e8 <GPIO_setupPinDirection+0x68>
    14cc:	bc c0       	rjmp	.+376    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <GPIO_setupPinDirection+0x5a>
    14d8:	5f c0       	rjmp	.+190    	; 0x1598 <GPIO_setupPinDirection+0x118>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <GPIO_setupPinDirection+0x66>
    14e4:	85 c0       	rjmp	.+266    	; 0x15f0 <GPIO_setupPinDirection+0x170>
    14e6:	af c0       	rjmp	.+350    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	a1 f4       	brne	.+40     	; 0x1516 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14ee:	aa e3       	ldi	r26, 0x3A	; 58
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_setupPinDirection+0x8c>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_setupPinDirection+0x88>
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	98 c0       	rjmp	.+304    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1516:	aa e3       	ldi	r26, 0x3A	; 58
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ea e3       	ldi	r30, 0x3A	; 58
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_setupPinDirection+0xb4>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_setupPinDirection+0xb0>
    1538:	80 95       	com	r24
    153a:	84 23       	and	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	83 c0       	rjmp	.+262    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	a1 f4       	brne	.+40     	; 0x156e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1546:	a7 e3       	ldi	r26, 0x37	; 55
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e7 e3       	ldi	r30, 0x37	; 55
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_setupPinDirection+0xe4>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_setupPinDirection+0xe0>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	6c c0       	rjmp	.+216    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    156e:	a7 e3       	ldi	r26, 0x37	; 55
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_setupPinDirection+0x10c>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_setupPinDirection+0x108>
    1590:	80 95       	com	r24
    1592:	84 23       	and	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	57 c0       	rjmp	.+174    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	a1 f4       	brne	.+40     	; 0x15c6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    159e:	a4 e3       	ldi	r26, 0x34	; 52
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e3       	ldi	r30, 0x34	; 52
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_setupPinDirection+0x13c>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_setupPinDirection+0x138>
    15c0:	84 2b       	or	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	40 c0       	rjmp	.+128    	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15c6:	a4 e3       	ldi	r26, 0x34	; 52
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e4 e3       	ldi	r30, 0x34	; 52
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_setupPinDirection+0x164>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_setupPinDirection+0x160>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	2b c0       	rjmp	.+86     	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	a1 f4       	brne	.+40     	; 0x161e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15f6:	a1 e3       	ldi	r26, 0x31	; 49
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_setupPinDirection+0x194>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_setupPinDirection+0x190>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    161e:	a1 e3       	ldi	r26, 0x31	; 49
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e3       	ldi	r30, 0x31	; 49
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_setupPinDirection+0x1bc>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_setupPinDirection+0x1b8>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <GPIO_writePin+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <GPIO_writePin+0x8>
    165e:	0f 92       	push	r0
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	6a 83       	std	Y+2, r22	; 0x02
    1668:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	88 30       	cpi	r24, 0x08	; 8
    166e:	08 f0       	brcs	.+2      	; 0x1672 <GPIO_writePin+0x1c>
    1670:	d5 c0       	rjmp	.+426    	; 0x181c <GPIO_writePin+0x1c6>
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	08 f0       	brcs	.+2      	; 0x167a <GPIO_writePin+0x24>
    1678:	d1 c0       	rjmp	.+418    	; 0x181c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	3d 83       	std	Y+5, r19	; 0x05
    1682:	2c 83       	std	Y+4, r18	; 0x04
    1684:	8c 81       	ldd	r24, Y+4	; 0x04
    1686:	9d 81       	ldd	r25, Y+5	; 0x05
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	91 05       	cpc	r25, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <GPIO_writePin+0x3a>
    168e:	43 c0       	rjmp	.+134    	; 0x1716 <GPIO_writePin+0xc0>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	2c f4       	brge	.+10     	; 0x16a4 <GPIO_writePin+0x4e>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	71 f0       	breq	.+28     	; 0x16be <GPIO_writePin+0x68>
    16a2:	bc c0       	rjmp	.+376    	; 0x181c <GPIO_writePin+0x1c6>
    16a4:	2c 81       	ldd	r18, Y+4	; 0x04
    16a6:	3d 81       	ldd	r19, Y+5	; 0x05
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <GPIO_writePin+0x5a>
    16ae:	5f c0       	rjmp	.+190    	; 0x176e <GPIO_writePin+0x118>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <GPIO_writePin+0x66>
    16ba:	85 c0       	rjmp	.+266    	; 0x17c6 <GPIO_writePin+0x170>
    16bc:	af c0       	rjmp	.+350    	; 0x181c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	a1 f4       	brne	.+40     	; 0x16ec <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16c4:	ab e3       	ldi	r26, 0x3B	; 59
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e3       	ldi	r30, 0x3B	; 59
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <GPIO_writePin+0x8c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <GPIO_writePin+0x88>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	98 c0       	rjmp	.+304    	; 0x181c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_writePin+0xb4>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_writePin+0xb0>
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	83 c0       	rjmp	.+262    	; 0x181c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	a1 f4       	brne	.+40     	; 0x1744 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    171c:	a8 e3       	ldi	r26, 0x38	; 56
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e3       	ldi	r30, 0x38	; 56
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_writePin+0xe4>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_writePin+0xe0>
    173e:	84 2b       	or	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	6c c0       	rjmp	.+216    	; 0x181c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1744:	a8 e3       	ldi	r26, 0x38	; 56
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_writePin+0x10c>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_writePin+0x108>
    1766:	80 95       	com	r24
    1768:	84 23       	and	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	57 c0       	rjmp	.+174    	; 0x181c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	a1 f4       	brne	.+40     	; 0x179c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1774:	a5 e3       	ldi	r26, 0x35	; 53
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e3       	ldi	r30, 0x35	; 53
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <GPIO_writePin+0x13c>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <GPIO_writePin+0x138>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	40 c0       	rjmp	.+128    	; 0x181c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    179c:	a5 e3       	ldi	r26, 0x35	; 53
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e3       	ldi	r30, 0x35	; 53
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_writePin+0x164>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_writePin+0x160>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	2b c0       	rjmp	.+86     	; 0x181c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	a1 f4       	brne	.+40     	; 0x17f4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17cc:	a2 e3       	ldi	r26, 0x32	; 50
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	02 2e       	mov	r0, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <GPIO_writePin+0x194>
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	0a 94       	dec	r0
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <GPIO_writePin+0x190>
    17ee:	84 2b       	or	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	14 c0       	rjmp	.+40     	; 0x181c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17f4:	a2 e3       	ldi	r26, 0x32	; 50
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e3       	ldi	r30, 0x32	; 50
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_writePin+0x1bc>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_writePin+0x1b8>
    1816:	80 95       	com	r24
    1818:	84 23       	and	r24, r20
    181a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_readPin+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_readPin+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    183e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	08 f0       	brcs	.+2      	; 0x1848 <GPIO_readPin+0x1c>
    1846:	84 c0       	rjmp	.+264    	; 0x1950 <GPIO_readPin+0x124>
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	08 f0       	brcs	.+2      	; 0x1850 <GPIO_readPin+0x24>
    184e:	80 c0       	rjmp	.+256    	; 0x1950 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	3d 83       	std	Y+5, r19	; 0x05
    1858:	2c 83       	std	Y+4, r18	; 0x04
    185a:	4c 81       	ldd	r20, Y+4	; 0x04
    185c:	5d 81       	ldd	r21, Y+5	; 0x05
    185e:	41 30       	cpi	r20, 0x01	; 1
    1860:	51 05       	cpc	r21, r1
    1862:	79 f1       	breq	.+94     	; 0x18c2 <GPIO_readPin+0x96>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	91 05       	cpc	r25, r1
    186c:	34 f4       	brge	.+12     	; 0x187a <GPIO_readPin+0x4e>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	69 f0       	breq	.+26     	; 0x1892 <GPIO_readPin+0x66>
    1878:	6b c0       	rjmp	.+214    	; 0x1950 <GPIO_readPin+0x124>
    187a:	4c 81       	ldd	r20, Y+4	; 0x04
    187c:	5d 81       	ldd	r21, Y+5	; 0x05
    187e:	42 30       	cpi	r20, 0x02	; 2
    1880:	51 05       	cpc	r21, r1
    1882:	b9 f1       	breq	.+110    	; 0x18f2 <GPIO_readPin+0xc6>
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	91 05       	cpc	r25, r1
    188c:	09 f4       	brne	.+2      	; 0x1890 <GPIO_readPin+0x64>
    188e:	49 c0       	rjmp	.+146    	; 0x1922 <GPIO_readPin+0xf6>
    1890:	5f c0       	rjmp	.+190    	; 0x1950 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1892:	e9 e3       	ldi	r30, 0x39	; 57
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a9 01       	movw	r20, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <GPIO_readPin+0x7e>
    18a6:	55 95       	asr	r21
    18a8:	47 95       	ror	r20
    18aa:	8a 95       	dec	r24
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <GPIO_readPin+0x7a>
    18ae:	ca 01       	movw	r24, r20
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	90 70       	andi	r25, 0x00	; 0
    18b4:	88 23       	and	r24, r24
    18b6:	19 f0       	breq	.+6      	; 0x18be <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
    18bc:	49 c0       	rjmp	.+146    	; 0x1950 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	47 c0       	rjmp	.+142    	; 0x1950 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18c2:	e6 e3       	ldi	r30, 0x36	; 54
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	88 2f       	mov	r24, r24
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a9 01       	movw	r20, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_readPin+0xae>
    18d6:	55 95       	asr	r21
    18d8:	47 95       	ror	r20
    18da:	8a 95       	dec	r24
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_readPin+0xaa>
    18de:	ca 01       	movw	r24, r20
    18e0:	81 70       	andi	r24, 0x01	; 1
    18e2:	90 70       	andi	r25, 0x00	; 0
    18e4:	88 23       	and	r24, r24
    18e6:	19 f0       	breq	.+6      	; 0x18ee <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	31 c0       	rjmp	.+98     	; 0x1950 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	2f c0       	rjmp	.+94     	; 0x1950 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18f2:	e3 e3       	ldi	r30, 0x33	; 51
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_readPin+0xde>
    1906:	55 95       	asr	r21
    1908:	47 95       	ror	r20
    190a:	8a 95       	dec	r24
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_readPin+0xda>
    190e:	ca 01       	movw	r24, r20
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	88 23       	and	r24, r24
    1916:	19 f0       	breq	.+6      	; 0x191e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	19 c0       	rjmp	.+50     	; 0x1950 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	17 c0       	rjmp	.+46     	; 0x1950 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1922:	e0 e3       	ldi	r30, 0x30	; 48
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a9 01       	movw	r20, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_readPin+0x10e>
    1936:	55 95       	asr	r21
    1938:	47 95       	ror	r20
    193a:	8a 95       	dec	r24
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_readPin+0x10a>
    193e:	ca 01       	movw	r24, r20
    1940:	81 70       	andi	r24, 0x01	; 1
    1942:	90 70       	andi	r25, 0x00	; 0
    1944:	88 23       	and	r24, r24
    1946:	19 f0       	breq	.+6      	; 0x194e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    194e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1950:	89 81       	ldd	r24, Y+1	; 0x01
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <GPIO_setupPortDirection+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <GPIO_setupPortDirection+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	84 30       	cpi	r24, 0x04	; 4
    1976:	90 f5       	brcc	.+100    	; 0x19dc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	3c 83       	std	Y+4, r19	; 0x04
    1980:	2b 83       	std	Y+3, r18	; 0x03
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	d1 f0       	breq	.+52     	; 0x19c0 <GPIO_setupPortDirection+0x5e>
    198c:	2b 81       	ldd	r18, Y+3	; 0x03
    198e:	3c 81       	ldd	r19, Y+4	; 0x04
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	31 05       	cpc	r19, r1
    1994:	2c f4       	brge	.+10     	; 0x19a0 <GPIO_setupPortDirection+0x3e>
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	61 f0       	breq	.+24     	; 0x19b6 <GPIO_setupPortDirection+0x54>
    199e:	1e c0       	rjmp	.+60     	; 0x19dc <GPIO_setupPortDirection+0x7a>
    19a0:	2b 81       	ldd	r18, Y+3	; 0x03
    19a2:	3c 81       	ldd	r19, Y+4	; 0x04
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <GPIO_setupPortDirection+0x68>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	83 30       	cpi	r24, 0x03	; 3
    19b0:	91 05       	cpc	r25, r1
    19b2:	81 f0       	breq	.+32     	; 0x19d4 <GPIO_setupPortDirection+0x72>
    19b4:	13 c0       	rjmp	.+38     	; 0x19dc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19b6:	ea e3       	ldi	r30, 0x3A	; 58
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
    19be:	0e c0       	rjmp	.+28     	; 0x19dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19c0:	e7 e3       	ldi	r30, 0x37	; 55
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	80 83       	st	Z, r24
    19c8:	09 c0       	rjmp	.+18     	; 0x19dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19ca:	e4 e3       	ldi	r30, 0x34	; 52
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19d4:	e1 e3       	ldi	r30, 0x31	; 49
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	80 83       	st	Z, r24
			break;
		}
	}
}
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <GPIO_writePort+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <GPIO_writePort+0x8>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	84 30       	cpi	r24, 0x04	; 4
    19fe:	90 f5       	brcc	.+100    	; 0x1a64 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3c 83       	std	Y+4, r19	; 0x04
    1a08:	2b 83       	std	Y+3, r18	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	91 05       	cpc	r25, r1
    1a12:	d1 f0       	breq	.+52     	; 0x1a48 <GPIO_writePort+0x5e>
    1a14:	2b 81       	ldd	r18, Y+3	; 0x03
    1a16:	3c 81       	ldd	r19, Y+4	; 0x04
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <GPIO_writePort+0x3e>
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	9c 81       	ldd	r25, Y+4	; 0x04
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <GPIO_writePort+0x54>
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <GPIO_writePort+0x7a>
    1a28:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <GPIO_writePort+0x68>
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	83 30       	cpi	r24, 0x03	; 3
    1a38:	91 05       	cpc	r25, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <GPIO_writePort+0x72>
    1a3c:	13 c0       	rjmp	.+38     	; 0x1a64 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
    1a46:	0e c0       	rjmp	.+28     	; 0x1a64 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a48:	e8 e3       	ldi	r30, 0x38	; 56
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
    1a5a:	04 c0       	rjmp	.+8      	; 0x1a64 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <GPIO_readPort+0x6>
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <GPIO_readPort+0x8>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a80:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	90 f5       	brcc	.+100    	; 0x1aec <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3c 83       	std	Y+4, r19	; 0x04
    1a90:	2b 83       	std	Y+3, r18	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <GPIO_readPort+0x5e>
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <GPIO_readPort+0x3e>
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	61 f0       	breq	.+24     	; 0x1ac6 <GPIO_readPort+0x54>
    1aae:	1e c0       	rjmp	.+60     	; 0x1aec <GPIO_readPort+0x7a>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <GPIO_readPort+0x68>
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_readPort+0x72>
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ac6:	e9 e3       	ldi	r30, 0x39	; 57
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ad0:	e6 e3       	ldi	r30, 0x36	; 54
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ada:	e3 e3       	ldi	r30, 0x33	; 51
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ae4:	e0 e3       	ldi	r30, 0x30	; 48
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	60 97       	sbiw	r28, 0x10	; 16
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	61 e0       	ldi	r22, 0x01	; 1
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	63 e0       	ldi	r22, 0x03	; 3
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	64 e0       	ldi	r22, 0x04	; 4
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	65 e0       	ldi	r22, 0x05	; 5
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	66 e0       	ldi	r22, 0x06	; 6
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	67 e0       	ldi	r22, 0x07	; 7
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b60:	1f 86       	std	Y+15, r1	; 0x0f
    1b62:	ab c0       	rjmp	.+342    	; 0x1cba <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1b78:	18 8a       	std	Y+16, r1	; 0x10
    1b7a:	22 c0       	rjmp	.+68     	; 0x1bc0 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1b7c:	88 89       	ldd	r24, Y+16	; 0x10
    1b7e:	98 2f       	mov	r25, r24
    1b80:	9c 5f       	subi	r25, 0xFC	; 252
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	69 2f       	mov	r22, r25
    1b86:	0e 94 16 0c 	call	0x182c	; 0x182c <GPIO_readPin>
    1b8a:	88 23       	and	r24, r24
    1b8c:	b1 f4       	brne	.+44     	; 0x1bba <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b90:	88 2f       	mov	r24, r24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	98 2f       	mov	r25, r24
    1b9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ba0:	89 0f       	add	r24, r25
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(15); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1ba8:	60 96       	adiw	r28, 0x10	; 16
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	f8 94       	cli
    1bae:	de bf       	out	0x3e, r29	; 62
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	cd bf       	out	0x3d, r28	; 61
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1bba:	88 89       	ldd	r24, Y+16	; 0x10
    1bbc:	8f 5f       	subi	r24, 0xFF	; 255
    1bbe:	88 8b       	std	Y+16, r24	; 0x10
    1bc0:	88 89       	ldd	r24, Y+16	; 0x10
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	d8 f2       	brcs	.-74     	; 0x1b7c <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e7       	ldi	r26, 0x70	; 112
    1bd6:	b1 e4       	ldi	r27, 0x41	; 65
    1bd8:	8b 87       	std	Y+11, r24	; 0x0b
    1bda:	9c 87       	std	Y+12, r25	; 0x0c
    1bdc:	ad 87       	std	Y+13, r26	; 0x0d
    1bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8f 83       	std	Y+7, r24	; 0x07
    1bfa:	98 87       	std	Y+8, r25	; 0x08
    1bfc:	a9 87       	std	Y+9, r26	; 0x09
    1bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <KEYPAD_getPressedKey+0x186>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <KEYPAD_getPressedKey+0x174>
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <KEYPAD_getPressedKey+0x168>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <KEYPAD_getPressedKey+0x1b0>
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	8f 5f       	subi	r24, 0xFF	; 255
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	84 30       	cpi	r24, 0x04	; 4
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <KEYPAD_getPressedKey+0x1c6>
    1cc0:	51 cf       	rjmp	.-350    	; 0x1b64 <KEYPAD_getPressedKey+0x68>
    1cc2:	4e cf       	rjmp	.-356    	; 0x1b60 <KEYPAD_getPressedKey+0x64>

00001cc4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <KEYPAD_4x4_adjustKeyNumber+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	3c 83       	std	Y+4, r19	; 0x04
    1cdc:	2b 83       	std	Y+3, r18	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	88 30       	cpi	r24, 0x08	; 8
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ce8:	70 c0       	rjmp	.+224    	; 0x1dca <KEYPAD_4x4_adjustKeyNumber+0x106>
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	29 30       	cpi	r18, 0x09	; 9
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	5c f5       	brge	.+86     	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1cfe:	59 c0       	rjmp	.+178    	; 0x1db2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	25 30       	cpi	r18, 0x05	; 5
    1d06:	31 05       	cpc	r19, r1
    1d08:	9c f4       	brge	.+38     	; 0x1d30 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d14:	48 c0       	rjmp	.+144    	; 0x1da6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d16:	2b 81       	ldd	r18, Y+3	; 0x03
    1d18:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1a:	23 30       	cpi	r18, 0x03	; 3
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	0c f0       	brlt	.+2      	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d20:	45 c0       	rjmp	.+138    	; 0x1dac <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d2c:	39 c0       	rjmp	.+114    	; 0x1da0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d2e:	68 c0       	rjmp	.+208    	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1d30:	2b 81       	ldd	r18, Y+3	; 0x03
    1d32:	3c 81       	ldd	r19, Y+4	; 0x04
    1d34:	26 30       	cpi	r18, 0x06	; 6
    1d36:	31 05       	cpc	r19, r1
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d3a:	41 c0       	rjmp	.+130    	; 0x1dbe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d40:	87 30       	cpi	r24, 0x07	; 7
    1d42:	91 05       	cpc	r25, r1
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d46:	3e c0       	rjmp	.+124    	; 0x1dc4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d48:	37 c0       	rjmp	.+110    	; 0x1db8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	2c 30       	cpi	r18, 0x0C	; 12
    1d50:	31 05       	cpc	r19, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d54:	46 c0       	rjmp	.+140    	; 0x1de2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	8d 30       	cpi	r24, 0x0D	; 13
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	5c f4       	brge	.+22     	; 0x1d76 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d60:	2b 81       	ldd	r18, Y+3	; 0x03
    1d62:	3c 81       	ldd	r19, Y+4	; 0x04
    1d64:	2a 30       	cpi	r18, 0x0A	; 10
    1d66:	31 05       	cpc	r19, r1
    1d68:	b1 f1       	breq	.+108    	; 0x1dd6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	8b 30       	cpi	r24, 0x0B	; 11
    1d70:	91 05       	cpc	r25, r1
    1d72:	a4 f5       	brge	.+104    	; 0x1ddc <KEYPAD_4x4_adjustKeyNumber+0x118>
    1d74:	2d c0       	rjmp	.+90     	; 0x1dd0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	2e 30       	cpi	r18, 0x0E	; 14
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	b9 f1       	breq	.+110    	; 0x1dee <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	8e 30       	cpi	r24, 0x0E	; 14
    1d86:	91 05       	cpc	r25, r1
    1d88:	7c f1       	brlt	.+94     	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8e:	2f 30       	cpi	r18, 0x0F	; 15
    1d90:	31 05       	cpc	r19, r1
    1d92:	81 f1       	breq	.+96     	; 0x1df4 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	80 31       	cpi	r24, 0x10	; 16
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	71 f1       	breq	.+92     	; 0x1dfa <KEYPAD_4x4_adjustKeyNumber+0x136>
    1d9e:	30 c0       	rjmp	.+96     	; 0x1e00 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1da0:	87 e3       	ldi	r24, 0x37	; 55
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	2f c0       	rjmp	.+94     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1da6:	88 e3       	ldi	r24, 0x38	; 56
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	2c c0       	rjmp	.+88     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1dac:	89 e3       	ldi	r24, 0x39	; 57
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	29 c0       	rjmp	.+82     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1db2:	85 e2       	ldi	r24, 0x25	; 37
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	26 c0       	rjmp	.+76     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1db8:	84 e3       	ldi	r24, 0x34	; 52
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	23 c0       	rjmp	.+70     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1dbe:	85 e3       	ldi	r24, 0x35	; 53
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	20 c0       	rjmp	.+64     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1dc4:	86 e3       	ldi	r24, 0x36	; 54
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	1d c0       	rjmp	.+58     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1dca:	8a e2       	ldi	r24, 0x2A	; 42
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	1a c0       	rjmp	.+52     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1dd0:	81 e3       	ldi	r24, 0x31	; 49
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	17 c0       	rjmp	.+46     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1dd6:	82 e3       	ldi	r24, 0x32	; 50
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1ddc:	83 e3       	ldi	r24, 0x33	; 51
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	11 c0       	rjmp	.+34     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1de2:	8d e2       	ldi	r24, 0x2D	; 45
    1de4:	89 83       	std	Y+1, r24	; 0x01
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 'E';  /* ASCII of Enter */
    1de8:	85 e4       	ldi	r24, 0x45	; 69
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	0b c0       	rjmp	.+22     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1dee:	80 e3       	ldi	r24, 0x30	; 48
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1df4:	8d e3       	ldi	r24, 0x3D	; 61
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	05 c0       	rjmp	.+10     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1dfa:	8b e2       	ldi	r24, 0x2B	; 43
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	64 e0       	ldi	r22, 0x04	; 4
    1e2c:	41 e0       	ldi	r20, 0x01	; 1
    1e2e:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	65 e0       	ldi	r22, 0x05	; 5
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 40 0a 	call	0x1480	; 0x1480 <GPIO_setupPinDirection>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 ea       	ldi	r26, 0xA0	; 160
    1e42:	b1 e4       	ldi	r27, 0x41	; 65
    1e44:	8b 87       	std	Y+11, r24	; 0x0b
    1e46:	9c 87       	std	Y+12, r25	; 0x0c
    1e48:	ad 87       	std	Y+13, r26	; 0x0d
    1e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a ef       	ldi	r20, 0xFA	; 250
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	a9 87       	std	Y+9, r26	; 0x09
    1e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <LCD_init+0x7a>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <LCD_init+0xda>
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_init+0xc8>
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <LCD_init+0xbc>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_init+0x104>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	6f ef       	ldi	r22, 0xFF	; 255
    1f24:	0e 94 b1 0c 	call	0x1962	; 0x1962 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f28:	88 e3       	ldi	r24, 0x38	; 56
    1f2a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f2e:	8c e0       	ldi	r24, 0x0C	; 12
    1f30:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_sendCommand>
}
    1f3a:	2e 96       	adiw	r28, 0x0e	; 14
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	e9 97       	sbiw	r28, 0x39	; 57
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	64 e0       	ldi	r22, 0x04	; 4
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e8       	ldi	r26, 0x80	; 128
    1f72:	bf e3       	ldi	r27, 0x3F	; 63
    1f74:	8d ab       	std	Y+53, r24	; 0x35
    1f76:	9e ab       	std	Y+54, r25	; 0x36
    1f78:	af ab       	std	Y+55, r26	; 0x37
    1f7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f7e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f80:	8f a9       	ldd	r24, Y+55	; 0x37
    1f82:	98 ad       	ldd	r25, Y+56	; 0x38
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a ef       	ldi	r20, 0xFA	; 250
    1f8a:	54 e4       	ldi	r21, 0x44	; 68
    1f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	89 ab       	std	Y+49, r24	; 0x31
    1f96:	9a ab       	std	Y+50, r25	; 0x32
    1f98:	ab ab       	std	Y+51, r26	; 0x33
    1f9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <LCD_sendCommand+0x72>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	98 ab       	std	Y+48, r25	; 0x30
    1fba:	8f a7       	std	Y+47, r24	; 0x2f
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fda:	8f a9       	ldd	r24, Y+55	; 0x37
    1fdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	98 ab       	std	Y+48, r25	; 0x30
    1ffc:	8f a7       	std	Y+47, r24	; 0x2f
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCD_sendCommand+0xd2>
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e a7       	std	Y+46, r25	; 0x2e
    2006:	8d a7       	std	Y+45, r24	; 0x2d
    2008:	8d a5       	ldd	r24, Y+45	; 0x2d
    200a:	9e a5       	ldd	r25, Y+46	; 0x2e
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_sendCommand+0xc0>
    2010:	9e a7       	std	Y+46, r25	; 0x2e
    2012:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8f a5       	ldd	r24, Y+47	; 0x2f
    2016:	98 a9       	ldd	r25, Y+48	; 0x30
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	98 ab       	std	Y+48, r25	; 0x30
    201c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2020:	98 a9       	ldd	r25, Y+48	; 0x30
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCD_sendCommand+0xb4>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	69 a9       	ldd	r22, Y+49	; 0x31
    202a:	7a a9       	ldd	r23, Y+50	; 0x32
    202c:	8b a9       	ldd	r24, Y+51	; 0x33
    202e:	9c a9       	ldd	r25, Y+52	; 0x34
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	98 ab       	std	Y+48, r25	; 0x30
    203a:	8f a7       	std	Y+47, r24	; 0x2f
    203c:	8f a5       	ldd	r24, Y+47	; 0x2f
    203e:	98 a9       	ldd	r25, Y+48	; 0x30
    2040:	9c a7       	std	Y+44, r25	; 0x2c
    2042:	8b a7       	std	Y+43, r24	; 0x2b
    2044:	8b a5       	ldd	r24, Y+43	; 0x2b
    2046:	9c a5       	ldd	r25, Y+44	; 0x2c
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_sendCommand+0xfc>
    204c:	9c a7       	std	Y+44, r25	; 0x2c
    204e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	65 e0       	ldi	r22, 0x05	; 5
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a0 e8       	ldi	r26, 0x80	; 128
    2060:	bf e3       	ldi	r27, 0x3F	; 63
    2062:	8f a3       	std	Y+39, r24	; 0x27
    2064:	98 a7       	std	Y+40, r25	; 0x28
    2066:	a9 a7       	std	Y+41, r26	; 0x29
    2068:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206a:	6f a1       	ldd	r22, Y+39	; 0x27
    206c:	78 a5       	ldd	r23, Y+40	; 0x28
    206e:	89 a5       	ldd	r24, Y+41	; 0x29
    2070:	9a a5       	ldd	r25, Y+42	; 0x2a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a ef       	ldi	r20, 0xFA	; 250
    2078:	54 e4       	ldi	r21, 0x44	; 68
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8b a3       	std	Y+35, r24	; 0x23
    2084:	9c a3       	std	Y+36, r25	; 0x24
    2086:	ad a3       	std	Y+37, r26	; 0x25
    2088:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    208a:	6b a1       	ldd	r22, Y+35	; 0x23
    208c:	7c a1       	ldd	r23, Y+36	; 0x24
    208e:	8d a1       	ldd	r24, Y+37	; 0x25
    2090:	9e a1       	ldd	r25, Y+38	; 0x26
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e8       	ldi	r20, 0x80	; 128
    2098:	5f e3       	ldi	r21, 0x3F	; 63
    209a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209e:	88 23       	and	r24, r24
    20a0:	2c f4       	brge	.+10     	; 0x20ac <LCD_sendCommand+0x160>
		__ticks = 1;
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	9a a3       	std	Y+34, r25	; 0x22
    20a8:	89 a3       	std	Y+33, r24	; 0x21
    20aa:	3f c0       	rjmp	.+126    	; 0x212a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	3f ef       	ldi	r19, 0xFF	; 255
    20b8:	4f e7       	ldi	r20, 0x7F	; 127
    20ba:	57 e4       	ldi	r21, 0x47	; 71
    20bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	4c f5       	brge	.+82     	; 0x2116 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c4:	6f a1       	ldd	r22, Y+39	; 0x27
    20c6:	78 a5       	ldd	r23, Y+40	; 0x28
    20c8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e2       	ldi	r20, 0x20	; 32
    20d2:	51 e4       	ldi	r21, 0x41	; 65
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	bc 01       	movw	r22, r24
    20de:	cd 01       	movw	r24, r26
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9a a3       	std	Y+34, r25	; 0x22
    20ea:	89 a3       	std	Y+33, r24	; 0x21
    20ec:	0f c0       	rjmp	.+30     	; 0x210c <LCD_sendCommand+0x1c0>
    20ee:	88 ec       	ldi	r24, 0xC8	; 200
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	98 a3       	std	Y+32, r25	; 0x20
    20f4:	8f 8f       	std	Y+31, r24	; 0x1f
    20f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f8:	98 a1       	ldd	r25, Y+32	; 0x20
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <LCD_sendCommand+0x1ae>
    20fe:	98 a3       	std	Y+32, r25	; 0x20
    2100:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2102:	89 a1       	ldd	r24, Y+33	; 0x21
    2104:	9a a1       	ldd	r25, Y+34	; 0x22
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210c:	89 a1       	ldd	r24, Y+33	; 0x21
    210e:	9a a1       	ldd	r25, Y+34	; 0x22
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	69 f7       	brne	.-38     	; 0x20ee <LCD_sendCommand+0x1a2>
    2114:	14 c0       	rjmp	.+40     	; 0x213e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	6b a1       	ldd	r22, Y+35	; 0x23
    2118:	7c a1       	ldd	r23, Y+36	; 0x24
    211a:	8d a1       	ldd	r24, Y+37	; 0x25
    211c:	9e a1       	ldd	r25, Y+38	; 0x26
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	9e 8f       	std	Y+30, r25	; 0x1e
    2130:	8d 8f       	std	Y+29, r24	; 0x1d
    2132:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2134:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_sendCommand+0x1ea>
    213a:	9e 8f       	std	Y+30, r25	; 0x1e
    213c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	69 ad       	ldd	r22, Y+57	; 0x39
    2142:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <GPIO_writePort>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	a0 e8       	ldi	r26, 0x80	; 128
    214c:	bf e3       	ldi	r27, 0x3F	; 63
    214e:	89 8f       	std	Y+25, r24	; 0x19
    2150:	9a 8f       	std	Y+26, r25	; 0x1a
    2152:	ab 8f       	std	Y+27, r26	; 0x1b
    2154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2156:	69 8d       	ldd	r22, Y+25	; 0x19
    2158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    215a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    215c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4a ef       	ldi	r20, 0xFA	; 250
    2164:	54 e4       	ldi	r21, 0x44	; 68
    2166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	8d 8b       	std	Y+21, r24	; 0x15
    2170:	9e 8b       	std	Y+22, r25	; 0x16
    2172:	af 8b       	std	Y+23, r26	; 0x17
    2174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2176:	6d 89       	ldd	r22, Y+21	; 0x15
    2178:	7e 89       	ldd	r23, Y+22	; 0x16
    217a:	8f 89       	ldd	r24, Y+23	; 0x17
    217c:	98 8d       	ldd	r25, Y+24	; 0x18
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e8       	ldi	r20, 0x80	; 128
    2184:	5f e3       	ldi	r21, 0x3F	; 63
    2186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    218a:	88 23       	and	r24, r24
    218c:	2c f4       	brge	.+10     	; 0x2198 <LCD_sendCommand+0x24c>
		__ticks = 1;
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
    2196:	3f c0       	rjmp	.+126    	; 0x2216 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2198:	6d 89       	ldd	r22, Y+21	; 0x15
    219a:	7e 89       	ldd	r23, Y+22	; 0x16
    219c:	8f 89       	ldd	r24, Y+23	; 0x17
    219e:	98 8d       	ldd	r25, Y+24	; 0x18
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	3f ef       	ldi	r19, 0xFF	; 255
    21a4:	4f e7       	ldi	r20, 0x7F	; 127
    21a6:	57 e4       	ldi	r21, 0x47	; 71
    21a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ac:	18 16       	cp	r1, r24
    21ae:	4c f5       	brge	.+82     	; 0x2202 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b0:	69 8d       	ldd	r22, Y+25	; 0x19
    21b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	51 e4       	ldi	r21, 0x41	; 65
    21c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	9c 8b       	std	Y+20, r25	; 0x14
    21d6:	8b 8b       	std	Y+19, r24	; 0x13
    21d8:	0f c0       	rjmp	.+30     	; 0x21f8 <LCD_sendCommand+0x2ac>
    21da:	88 ec       	ldi	r24, 0xC8	; 200
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	9a 8b       	std	Y+18, r25	; 0x12
    21e0:	89 8b       	std	Y+17, r24	; 0x11
    21e2:	89 89       	ldd	r24, Y+17	; 0x11
    21e4:	9a 89       	ldd	r25, Y+18	; 0x12
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_sendCommand+0x29a>
    21ea:	9a 8b       	std	Y+18, r25	; 0x12
    21ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ee:	8b 89       	ldd	r24, Y+19	; 0x13
    21f0:	9c 89       	ldd	r25, Y+20	; 0x14
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	9c 8b       	std	Y+20, r25	; 0x14
    21f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f8:	8b 89       	ldd	r24, Y+19	; 0x13
    21fa:	9c 89       	ldd	r25, Y+20	; 0x14
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	69 f7       	brne	.-38     	; 0x21da <LCD_sendCommand+0x28e>
    2200:	14 c0       	rjmp	.+40     	; 0x222a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2202:	6d 89       	ldd	r22, Y+21	; 0x15
    2204:	7e 89       	ldd	r23, Y+22	; 0x16
    2206:	8f 89       	ldd	r24, Y+23	; 0x17
    2208:	98 8d       	ldd	r25, Y+24	; 0x18
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	98 8b       	std	Y+16, r25	; 0x10
    221c:	8f 87       	std	Y+15, r24	; 0x0f
    221e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2220:	98 89       	ldd	r25, Y+16	; 0x10
    2222:	01 97       	sbiw	r24, 0x01	; 1
    2224:	f1 f7       	brne	.-4      	; 0x2222 <LCD_sendCommand+0x2d6>
    2226:	98 8b       	std	Y+16, r25	; 0x10
    2228:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	65 e0       	ldi	r22, 0x05	; 5
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e8       	ldi	r26, 0x80	; 128
    223a:	bf e3       	ldi	r27, 0x3F	; 63
    223c:	8b 87       	std	Y+11, r24	; 0x0b
    223e:	9c 87       	std	Y+12, r25	; 0x0c
    2240:	ad 87       	std	Y+13, r26	; 0x0d
    2242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8f 83       	std	Y+7, r24	; 0x07
    225e:	98 87       	std	Y+8, r25	; 0x08
    2260:	a9 87       	std	Y+9, r26	; 0x09
    2262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2264:	6f 81       	ldd	r22, Y+7	; 0x07
    2266:	78 85       	ldd	r23, Y+8	; 0x08
    2268:	89 85       	ldd	r24, Y+9	; 0x09
    226a:	9a 85       	ldd	r25, Y+10	; 0x0a
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_sendCommand+0x33a>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_sendCommand+0x39a>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 83       	std	Y+4, r25	; 0x04
    22ce:	8b 83       	std	Y+3, r24	; 0x03
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_sendCommand+0x388>
    22d8:	9c 83       	std	Y+4, r25	; 0x04
    22da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8d 81       	ldd	r24, Y+5	; 0x05
    22de:	9e 81       	ldd	r25, Y+6	; 0x06
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_sendCommand+0x37c>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6f 81       	ldd	r22, Y+7	; 0x07
    22f2:	78 85       	ldd	r23, Y+8	; 0x08
    22f4:	89 85       	ldd	r24, Y+9	; 0x09
    22f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	9a 81       	ldd	r25, Y+2	; 0x02
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_sendCommand+0x3c4>
    2314:	9a 83       	std	Y+2, r25	; 0x02
    2316:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2318:	e9 96       	adiw	r28, 0x39	; 57
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	e9 97       	sbiw	r28, 0x39	; 57
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	64 e0       	ldi	r22, 0x04	; 4
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8d ab       	std	Y+53, r24	; 0x35
    2354:	9e ab       	std	Y+54, r25	; 0x36
    2356:	af ab       	std	Y+55, r26	; 0x37
    2358:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6d a9       	ldd	r22, Y+53	; 0x35
    235c:	7e a9       	ldd	r23, Y+54	; 0x36
    235e:	8f a9       	ldd	r24, Y+55	; 0x37
    2360:	98 ad       	ldd	r25, Y+56	; 0x38
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a ef       	ldi	r20, 0xFA	; 250
    2368:	54 e4       	ldi	r21, 0x44	; 68
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	89 ab       	std	Y+49, r24	; 0x31
    2374:	9a ab       	std	Y+50, r25	; 0x32
    2376:	ab ab       	std	Y+51, r26	; 0x33
    2378:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    237a:	69 a9       	ldd	r22, Y+49	; 0x31
    237c:	7a a9       	ldd	r23, Y+50	; 0x32
    237e:	8b a9       	ldd	r24, Y+51	; 0x33
    2380:	9c a9       	ldd	r25, Y+52	; 0x34
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	98 ab       	std	Y+48, r25	; 0x30
    2398:	8f a7       	std	Y+47, r24	; 0x2f
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    239c:	69 a9       	ldd	r22, Y+49	; 0x31
    239e:	7a a9       	ldd	r23, Y+50	; 0x32
    23a0:	8b a9       	ldd	r24, Y+51	; 0x33
    23a2:	9c a9       	ldd	r25, Y+52	; 0x34
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6d a9       	ldd	r22, Y+53	; 0x35
    23b6:	7e a9       	ldd	r23, Y+54	; 0x36
    23b8:	8f a9       	ldd	r24, Y+55	; 0x37
    23ba:	98 ad       	ldd	r25, Y+56	; 0x38
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	98 ab       	std	Y+48, r25	; 0x30
    23da:	8f a7       	std	Y+47, r24	; 0x2f
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_displayCharacter+0xd2>
    23de:	88 ec       	ldi	r24, 0xC8	; 200
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9e a7       	std	Y+46, r25	; 0x2e
    23e4:	8d a7       	std	Y+45, r24	; 0x2d
    23e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    23e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_displayCharacter+0xc0>
    23ee:	9e a7       	std	Y+46, r25	; 0x2e
    23f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f4:	98 a9       	ldd	r25, Y+48	; 0x30
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	98 ab       	std	Y+48, r25	; 0x30
    23fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_displayCharacter+0xb4>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	69 a9       	ldd	r22, Y+49	; 0x31
    2408:	7a a9       	ldd	r23, Y+50	; 0x32
    240a:	8b a9       	ldd	r24, Y+51	; 0x33
    240c:	9c a9       	ldd	r25, Y+52	; 0x34
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
    241a:	8f a5       	ldd	r24, Y+47	; 0x2f
    241c:	98 a9       	ldd	r25, Y+48	; 0x30
    241e:	9c a7       	std	Y+44, r25	; 0x2c
    2420:	8b a7       	std	Y+43, r24	; 0x2b
    2422:	8b a5       	ldd	r24, Y+43	; 0x2b
    2424:	9c a5       	ldd	r25, Y+44	; 0x2c
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_displayCharacter+0xfc>
    242a:	9c a7       	std	Y+44, r25	; 0x2c
    242c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    242e:	83 e0       	ldi	r24, 0x03	; 3
    2430:	65 e0       	ldi	r22, 0x05	; 5
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e8       	ldi	r26, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	8f a3       	std	Y+39, r24	; 0x27
    2442:	98 a7       	std	Y+40, r25	; 0x28
    2444:	a9 a7       	std	Y+41, r26	; 0x29
    2446:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6f a1       	ldd	r22, Y+39	; 0x27
    244a:	78 a5       	ldd	r23, Y+40	; 0x28
    244c:	89 a5       	ldd	r24, Y+41	; 0x29
    244e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8b a3       	std	Y+35, r24	; 0x23
    2462:	9c a3       	std	Y+36, r25	; 0x24
    2464:	ad a3       	std	Y+37, r26	; 0x25
    2466:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2468:	6b a1       	ldd	r22, Y+35	; 0x23
    246a:	7c a1       	ldd	r23, Y+36	; 0x24
    246c:	8d a1       	ldd	r24, Y+37	; 0x25
    246e:	9e a1       	ldd	r25, Y+38	; 0x26
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    248a:	6b a1       	ldd	r22, Y+35	; 0x23
    248c:	7c a1       	ldd	r23, Y+36	; 0x24
    248e:	8d a1       	ldd	r24, Y+37	; 0x25
    2490:	9e a1       	ldd	r25, Y+38	; 0x26
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6f a1       	ldd	r22, Y+39	; 0x27
    24a4:	78 a5       	ldd	r23, Y+40	; 0x28
    24a6:	89 a5       	ldd	r24, Y+41	; 0x29
    24a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9a a3       	std	Y+34, r25	; 0x22
    24c8:	89 a3       	std	Y+33, r24	; 0x21
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_displayCharacter+0x1c0>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 a3       	std	Y+32, r25	; 0x20
    24d2:	8f 8f       	std	Y+31, r24	; 0x1f
    24d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24d6:	98 a1       	ldd	r25, Y+32	; 0x20
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_displayCharacter+0x1ae>
    24dc:	98 a3       	std	Y+32, r25	; 0x20
    24de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	89 a1       	ldd	r24, Y+33	; 0x21
    24e2:	9a a1       	ldd	r25, Y+34	; 0x22
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9a a3       	std	Y+34, r25	; 0x22
    24e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	89 a1       	ldd	r24, Y+33	; 0x21
    24ec:	9a a1       	ldd	r25, Y+34	; 0x22
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_displayCharacter+0x1a2>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9a a3       	std	Y+34, r25	; 0x22
    2506:	89 a3       	std	Y+33, r24	; 0x21
    2508:	89 a1       	ldd	r24, Y+33	; 0x21
    250a:	9a a1       	ldd	r25, Y+34	; 0x22
    250c:	9e 8f       	std	Y+30, r25	; 0x1e
    250e:	8d 8f       	std	Y+29, r24	; 0x1d
    2510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_displayCharacter+0x1ea>
    2518:	9e 8f       	std	Y+30, r25	; 0x1e
    251a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	69 ad       	ldd	r22, Y+57	; 0x39
    2520:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <GPIO_writePort>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e8       	ldi	r26, 0x80	; 128
    252a:	bf e3       	ldi	r27, 0x3F	; 63
    252c:	89 8f       	std	Y+25, r24	; 0x19
    252e:	9a 8f       	std	Y+26, r25	; 0x1a
    2530:	ab 8f       	std	Y+27, r26	; 0x1b
    2532:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	69 8d       	ldd	r22, Y+25	; 0x19
    2536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    253a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a ef       	ldi	r20, 0xFA	; 250
    2542:	54 e4       	ldi	r21, 0x44	; 68
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8d 8b       	std	Y+21, r24	; 0x15
    254e:	9e 8b       	std	Y+22, r25	; 0x16
    2550:	af 8b       	std	Y+23, r26	; 0x17
    2552:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 8b       	std	Y+20, r25	; 0x14
    2572:	8b 8b       	std	Y+19, r24	; 0x13
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2576:	6d 89       	ldd	r22, Y+21	; 0x15
    2578:	7e 89       	ldd	r23, Y+22	; 0x16
    257a:	8f 89       	ldd	r24, Y+23	; 0x17
    257c:	98 8d       	ldd	r25, Y+24	; 0x18
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	69 8d       	ldd	r22, Y+25	; 0x19
    2590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_displayCharacter+0x2ac>
    25b8:	88 ec       	ldi	r24, 0xC8	; 200
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9a 8b       	std	Y+18, r25	; 0x12
    25be:	89 8b       	std	Y+17, r24	; 0x11
    25c0:	89 89       	ldd	r24, Y+17	; 0x11
    25c2:	9a 89       	ldd	r25, Y+18	; 0x12
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_displayCharacter+0x29a>
    25c8:	9a 8b       	std	Y+18, r25	; 0x12
    25ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8b 89       	ldd	r24, Y+19	; 0x13
    25ce:	9c 89       	ldd	r25, Y+20	; 0x14
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_displayCharacter+0x28e>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6d 89       	ldd	r22, Y+21	; 0x15
    25e2:	7e 89       	ldd	r23, Y+22	; 0x16
    25e4:	8f 89       	ldd	r24, Y+23	; 0x17
    25e6:	98 8d       	ldd	r25, Y+24	; 0x18
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8b 8b       	std	Y+19, r24	; 0x13
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	98 8b       	std	Y+16, r25	; 0x10
    25fa:	8f 87       	std	Y+15, r24	; 0x0f
    25fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fe:	98 89       	ldd	r25, Y+16	; 0x10
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_displayCharacter+0x2d6>
    2604:	98 8b       	std	Y+16, r25	; 0x10
    2606:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	65 e0       	ldi	r22, 0x05	; 5
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <GPIO_writePin>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	8b 87       	std	Y+11, r24	; 0x0b
    261c:	9c 87       	std	Y+12, r25	; 0x0c
    261e:	ad 87       	std	Y+13, r26	; 0x0d
    2620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8f 83       	std	Y+7, r24	; 0x07
    263c:	98 87       	std	Y+8, r25	; 0x08
    263e:	a9 87       	std	Y+9, r26	; 0x09
    2640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_displayCharacter+0x39a>
    26a6:	88 ec       	ldi	r24, 0xC8	; 200
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_displayCharacter+0x388>
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_displayCharacter+0x37c>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_displayCharacter+0x3c4>
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26f6:	e9 96       	adiw	r28, 0x39	; 57
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <LCD_displayString+0x6>
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	9b 83       	std	Y+3, r25	; 0x03
    2716:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2718:	19 82       	std	Y+1, r1	; 0x01
    271a:	0e c0       	rjmp	.+28     	; 0x2738 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	28 2f       	mov	r18, r24
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	9b 81       	ldd	r25, Y+3	; 0x03
    2726:	fc 01       	movw	r30, r24
    2728:	e2 0f       	add	r30, r18
    272a:	f3 1f       	adc	r31, r19
    272c:	80 81       	ld	r24, Z
    272e:	0e 94 95 11 	call	0x232a	; 0x232a <LCD_displayCharacter>
		i++;
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	9b 81       	ldd	r25, Y+3	; 0x03
    2742:	fc 01       	movw	r30, r24
    2744:	e2 0f       	add	r30, r18
    2746:	f3 1f       	adc	r31, r19
    2748:	80 81       	ld	r24, Z
    274a:	88 23       	and	r24, r24
    274c:	39 f7       	brne	.-50     	; 0x271c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <LCD_moveCursor+0x6>
    2760:	00 d0       	rcall	.+0      	; 0x2762 <LCD_moveCursor+0x8>
    2762:	0f 92       	push	r0
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	8a 83       	std	Y+2, r24	; 0x02
    276a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3d 83       	std	Y+5, r19	; 0x05
    2774:	2c 83       	std	Y+4, r18	; 0x04
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	9d 81       	ldd	r25, Y+5	; 0x05
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	c1 f0       	breq	.+48     	; 0x27b0 <LCD_moveCursor+0x56>
    2780:	2c 81       	ldd	r18, Y+4	; 0x04
    2782:	3d 81       	ldd	r19, Y+5	; 0x05
    2784:	22 30       	cpi	r18, 0x02	; 2
    2786:	31 05       	cpc	r19, r1
    2788:	2c f4       	brge	.+10     	; 0x2794 <LCD_moveCursor+0x3a>
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	61 f0       	breq	.+24     	; 0x27aa <LCD_moveCursor+0x50>
    2792:	19 c0       	rjmp	.+50     	; 0x27c6 <LCD_moveCursor+0x6c>
    2794:	2c 81       	ldd	r18, Y+4	; 0x04
    2796:	3d 81       	ldd	r19, Y+5	; 0x05
    2798:	22 30       	cpi	r18, 0x02	; 2
    279a:	31 05       	cpc	r19, r1
    279c:	69 f0       	breq	.+26     	; 0x27b8 <LCD_moveCursor+0x5e>
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	9d 81       	ldd	r25, Y+5	; 0x05
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	91 05       	cpc	r25, r1
    27a6:	61 f0       	breq	.+24     	; 0x27c0 <LCD_moveCursor+0x66>
    27a8:	0e c0       	rjmp	.+28     	; 0x27c6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	0b c0       	rjmp	.+22     	; 0x27c6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	80 5c       	subi	r24, 0xC0	; 192
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	80 5f       	subi	r24, 0xF0	; 240
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	80 5b       	subi	r24, 0xB0	; 176
    27c4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	80 68       	ori	r24, 0x80	; 128
    27ca:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_sendCommand>
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <LCD_displayStringRowColumn+0x6>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <LCD_displayStringRowColumn+0x8>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	6a 83       	std	Y+2, r22	; 0x02
    27ee:	5c 83       	std	Y+4, r21	; 0x04
    27f0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	6a 81       	ldd	r22, Y+2	; 0x02
    27f6:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	9c 81       	ldd	r25, Y+4	; 0x04
    27fe:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayString>
}
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	62 97       	sbiw	r28, 0x12	; 18
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	cd bf       	out	0x3d, r28	; 61
    2824:	9a 8b       	std	Y+18, r25	; 0x12
    2826:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2828:	89 89       	ldd	r24, Y+17	; 0x11
    282a:	9a 89       	ldd	r25, Y+18	; 0x12
    282c:	9e 01       	movw	r18, r28
    282e:	2f 5f       	subi	r18, 0xFF	; 255
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	b9 01       	movw	r22, r18
    2834:	4a e0       	ldi	r20, 0x0A	; 10
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <itoa>
   LCD_displayString(buff); /* Display the string */
    283c:	ce 01       	movw	r24, r28
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	0e 94 84 13 	call	0x2708	; 0x2708 <LCD_displayString>
}
    2844:	62 96       	adiw	r28, 0x12	; 18
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LCD_sendCommand>
}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <__vector_9>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(TIMER1_OVF_vect)
{
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	11 24       	eor	r1, r1
    2874:	2f 93       	push	r18
    2876:	3f 93       	push	r19
    2878:	4f 93       	push	r20
    287a:	5f 93       	push	r21
    287c:	6f 93       	push	r22
    287e:	7f 93       	push	r23
    2880:	8f 93       	push	r24
    2882:	9f 93       	push	r25
    2884:	af 93       	push	r26
    2886:	bf 93       	push	r27
    2888:	ef 93       	push	r30
    288a:	ff 93       	push	r31
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2894:	80 91 38 01 	lds	r24, 0x0138
    2898:	90 91 39 01 	lds	r25, 0x0139
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	29 f0       	breq	.+10     	; 0x28aa <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28a0:	e0 91 38 01 	lds	r30, 0x0138
    28a4:	f0 91 39 01 	lds	r31, 0x0139
    28a8:	09 95       	icall
	}

}
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	ff 91       	pop	r31
    28b0:	ef 91       	pop	r30
    28b2:	bf 91       	pop	r27
    28b4:	af 91       	pop	r26
    28b6:	9f 91       	pop	r25
    28b8:	8f 91       	pop	r24
    28ba:	7f 91       	pop	r23
    28bc:	6f 91       	pop	r22
    28be:	5f 91       	pop	r21
    28c0:	4f 91       	pop	r20
    28c2:	3f 91       	pop	r19
    28c4:	2f 91       	pop	r18
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	0f 90       	pop	r0
    28cc:	1f 90       	pop	r1
    28ce:	18 95       	reti

000028d0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    28d0:	1f 92       	push	r1
    28d2:	0f 92       	push	r0
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	0f 92       	push	r0
    28d8:	11 24       	eor	r1, r1
    28da:	2f 93       	push	r18
    28dc:	3f 93       	push	r19
    28de:	4f 93       	push	r20
    28e0:	5f 93       	push	r21
    28e2:	6f 93       	push	r22
    28e4:	7f 93       	push	r23
    28e6:	8f 93       	push	r24
    28e8:	9f 93       	push	r25
    28ea:	af 93       	push	r26
    28ec:	bf 93       	push	r27
    28ee:	ef 93       	push	r30
    28f0:	ff 93       	push	r31
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    28fa:	80 91 38 01 	lds	r24, 0x0138
    28fe:	90 91 39 01 	lds	r25, 0x0139
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	29 f0       	breq	.+10     	; 0x2910 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2906:	e0 91 38 01 	lds	r30, 0x0138
    290a:	f0 91 39 01 	lds	r31, 0x0139
    290e:	09 95       	icall
	}

}
    2910:	cf 91       	pop	r28
    2912:	df 91       	pop	r29
    2914:	ff 91       	pop	r31
    2916:	ef 91       	pop	r30
    2918:	bf 91       	pop	r27
    291a:	af 91       	pop	r26
    291c:	9f 91       	pop	r25
    291e:	8f 91       	pop	r24
    2920:	7f 91       	pop	r23
    2922:	6f 91       	pop	r22
    2924:	5f 91       	pop	r21
    2926:	4f 91       	pop	r20
    2928:	3f 91       	pop	r19
    292a:	2f 91       	pop	r18
    292c:	0f 90       	pop	r0
    292e:	0f be       	out	0x3f, r0	; 63
    2930:	0f 90       	pop	r0
    2932:	1f 90       	pop	r1
    2934:	18 95       	reti

00002936 <Timer1_init>:
 * 1. Setup the timing like with ability to configure in different modes (Normal / CTC ..)
 * 2. Enable the CLOCK.
 * 3. Setup the user-define Frequency.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <Timer1_init+0x6>
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	 * WGM11  = affect timer mode / operation
	 * WGM10  = affect timer mode / operation
	 * All bits are configured with the pre-defined dynamic configurations
	 ***********************************************************************/

	TCCR1A=0;
    2944:	ef e4       	ldi	r30, 0x4F	; 79
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	10 82       	st	Z, r1
	 * CS12  = Clock Select bit
	 * CS11  = Clock Select bit
	 * CS10  =  Clock Select bit
	 * All bits are configured with the pre-defined dynamic configurations
	 ***********************************************************************/
	TCCR1B=0;
    294a:	ee e4       	ldi	r30, 0x4E	; 78
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	10 82       	st	Z, r1
	TCNT1=0;
    2950:	ec e4       	ldi	r30, 0x4C	; 76
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	11 82       	std	Z+1, r1	; 0x01
    2956:	10 82       	st	Z, r1

	TCNT1=Config_Ptr->initial_value;
    2958:	ac e4       	ldi	r26, 0x4C	; 76
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e9 81       	ldd	r30, Y+1	; 0x01
    295e:	fa 81       	ldd	r31, Y+2	; 0x02
    2960:	80 81       	ld	r24, Z
    2962:	91 81       	ldd	r25, Z+1	; 0x01
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	9c 93       	st	X, r25
    2968:	8e 93       	st	-X, r24
	 * TOIE0 = Timer0 bit - not used -
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/


	if (Config_Ptr->mode==TIMER_MODE_NORMAL)
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	85 81       	ldd	r24, Z+5	; 0x05
    2970:	88 23       	and	r24, r24
    2972:	b1 f4       	brne	.+44     	; 0x29a0 <Timer1_init+0x6a>
	{
		/* NOT PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    2974:	af e4       	ldi	r26, 0x4F	; 79
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	ef e4       	ldi	r30, 0x4F	; 79
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 60       	ori	r24, 0x08	; 8
    2980:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2982:	af e4       	ldi	r26, 0x4F	; 79
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ef e4       	ldi	r30, 0x4F	; 79
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	84 60       	ori	r24, 0x04	; 4
    298e:	8c 93       	st	X, r24

		/* Normal Mode (TIMER OVER FLOW) Interrupt Enable */
		SET_BIT(TIMSK,TOIE1);
    2990:	a9 e5       	ldi	r26, 0x59	; 89
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e9 e5       	ldi	r30, 0x59	; 89
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	84 60       	ori	r24, 0x04	; 4
    299c:	8c 93       	st	X, r24
    299e:	2a c0       	rjmp	.+84     	; 0x29f4 <Timer1_init+0xbe>


	}
	else if (Config_Ptr->mode==TIMER_MODE_CTC)
    29a0:	e9 81       	ldd	r30, Y+1	; 0x01
    29a2:	fa 81       	ldd	r31, Y+2	; 0x02
    29a4:	85 81       	ldd	r24, Z+5	; 0x05
    29a6:	84 30       	cpi	r24, 0x04	; 4
    29a8:	29 f5       	brne	.+74     	; 0x29f4 <Timer1_init+0xbe>
	{
		/* NOT PWM MODE */
		SET_BIT(TCCR1A,FOC1A);
    29aa:	af e4       	ldi	r26, 0x4F	; 79
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	ef e4       	ldi	r30, 0x4F	; 79
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	88 60       	ori	r24, 0x08	; 8
    29b6:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    29b8:	af e4       	ldi	r26, 0x4F	; 79
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ef e4       	ldi	r30, 0x4F	; 79
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	84 60       	ori	r24, 0x04	; 4
    29c4:	8c 93       	st	X, r24

		SET_BIT(TCCR1B,WGM12);
    29c6:	ae e4       	ldi	r26, 0x4E	; 78
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	ee e4       	ldi	r30, 0x4E	; 78
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	88 60       	ori	r24, 0x08	; 8
    29d2:	8c 93       	st	X, r24
		OCR1A=Config_Ptr->compare_value;
    29d4:	aa e4       	ldi	r26, 0x4A	; 74
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	e9 81       	ldd	r30, Y+1	; 0x01
    29da:	fa 81       	ldd	r31, Y+2	; 0x02
    29dc:	82 81       	ldd	r24, Z+2	; 0x02
    29de:	93 81       	ldd	r25, Z+3	; 0x03
    29e0:	11 96       	adiw	r26, 0x01	; 1
    29e2:	9c 93       	st	X, r25
    29e4:	8e 93       	st	-X, r24

		/* CTC (COMPARE MATCH) Interrupt Enable */
		SET_BIT(TIMSK,OCIE1A);
    29e6:	a9 e5       	ldi	r26, 0x59	; 89
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e9 e5       	ldi	r30, 0x59	; 89
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	80 61       	ori	r24, 0x10	; 16
    29f2:	8c 93       	st	X, r24


	}
	TCCR1B|=Config_Ptr->prescaler;
    29f4:	ae e4       	ldi	r26, 0x4E	; 78
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ee e4       	ldi	r30, 0x4E	; 78
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	90 81       	ld	r25, Z
    29fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2a00:	fa 81       	ldd	r31, Y+2	; 0x02
    2a02:	84 81       	ldd	r24, Z+4	; 0x04
    2a04:	89 2b       	or	r24, r25
    2a06:	8c 93       	st	X, r24


}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <Timer1_deinit>:
/*
 * Description :
 * Function Responsible to Disable Timer1
 */
void Timer1_deinit(void)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
	/* Disable Clock Source entered to Timer */
	TCCR1B=0;
    2a1a:	ee e4       	ldi	r30, 0x4E	; 78
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	10 82       	st	Z, r1
	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    2a20:	10 92 39 01 	sts	0x0139, r1
    2a24:	10 92 38 01 	sts	0x0138, r1

}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	08 95       	ret

00002a2e <Timer1_setCallBack>:
/*
 * Description :
 * Function Responsible to Set the Call-back function used in Interrupt-Handeler
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <Timer1_setCallBack+0x6>
    2a34:	cd b7       	in	r28, 0x3d	; 61
    2a36:	de b7       	in	r29, 0x3e	; 62
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	/* set the call back function address ar received */
	g_callBackPtr = a_ptr;
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	90 93 39 01 	sts	0x0139, r25
    2a44:	80 93 38 01 	sts	0x0138, r24
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *ConfigPtr)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <UART_init+0x6>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <UART_init+0x8>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a62:	1a 82       	std	Y+2, r1	; 0x02
    2a64:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a66:	eb e2       	ldi	r30, 0x2B	; 43
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a6e:	ea e2       	ldi	r30, 0x2A	; 42
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	88 e1       	ldi	r24, 0x18	; 24
    2a74:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2a76:	e0 e4       	ldi	r30, 0x40	; 64
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 e8       	ldi	r24, 0x80	; 128
    2a7c:	80 83       	st	Z, r24
	CLEAR_BIT(UCSRC,UMSEL);
    2a7e:	a0 e4       	ldi	r26, 0x40	; 64
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e0 e4       	ldi	r30, 0x40	; 64
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	8f 7b       	andi	r24, 0xBF	; 191
    2a8a:	8c 93       	st	X, r24
	/* Configure the Parity bits */
	CLEAR_BIT(UCSRC,UPM0);
    2a8c:	a0 e4       	ldi	r26, 0x40	; 64
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e0 e4       	ldi	r30, 0x40	; 64
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	8f 7e       	andi	r24, 0xEF	; 239
    2a98:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UPM1);
    2a9a:	a0 e4       	ldi	r26, 0x40	; 64
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	e0 e4       	ldi	r30, 0x40	; 64
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8f 7d       	andi	r24, 0xDF	; 223
    2aa6:	8c 93       	st	X, r24
	UCSRC = (UCSRC)|((ConfigPtr->parity)<<4);
    2aa8:	a0 e4       	ldi	r26, 0x40	; 64
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e0 e4       	ldi	r30, 0x40	; 64
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ab8:	81 81       	ldd	r24, Z+1	; 0x01
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	82 95       	swap	r24
    2ac0:	92 95       	swap	r25
    2ac2:	90 7f       	andi	r25, 0xF0	; 240
    2ac4:	98 27       	eor	r25, r24
    2ac6:	80 7f       	andi	r24, 0xF0	; 240
    2ac8:	98 27       	eor	r25, r24
    2aca:	82 2b       	or	r24, r18
    2acc:	8c 93       	st	X, r24
	/* Configure the Stop bit */
	CLEAR_BIT(UCSRC,USBS);
    2ace:	a0 e4       	ldi	r26, 0x40	; 64
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e0 e4       	ldi	r30, 0x40	; 64
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	87 7f       	andi	r24, 0xF7	; 247
    2ada:	8c 93       	st	X, r24
	UCSRC=(UCSRC)|(ConfigPtr->stop_bit<<3);
    2adc:	a0 e4       	ldi	r26, 0x40	; 64
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e0 e4       	ldi	r30, 0x40	; 64
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aea:	fc 81       	ldd	r31, Y+4	; 0x04
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	88 2f       	mov	r24, r24
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	82 2b       	or	r24, r18
    2b00:	8c 93       	st	X, r24
	/* Configure the Character Size */
	CLEAR_BIT(UCSRC,UCSZ0);
    2b02:	a0 e4       	ldi	r26, 0x40	; 64
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e0 e4       	ldi	r30, 0x40	; 64
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	8d 7f       	andi	r24, 0xFD	; 253
    2b0e:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    2b10:	a0 e4       	ldi	r26, 0x40	; 64
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e0 e4       	ldi	r30, 0x40	; 64
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	8b 7f       	andi	r24, 0xFB	; 251
    2b1c:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRB,UCSZ2);
    2b1e:	aa e2       	ldi	r26, 0x2A	; 42
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	ea e2       	ldi	r30, 0x2A	; 42
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	8b 7f       	andi	r24, 0xFB	; 251
    2b2a:	8c 93       	st	X, r24
	if (ConfigPtr->bit_data==9)
    2b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b30:	80 81       	ld	r24, Z
    2b32:	89 30       	cpi	r24, 0x09	; 9
    2b34:	b1 f4       	brne	.+44     	; 0x2b62 <UART_init+0x110>
	{
		SET_BIT(UCSRC,UCSZ0);
    2b36:	a0 e4       	ldi	r26, 0x40	; 64
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e0 e4       	ldi	r30, 0x40	; 64
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	82 60       	ori	r24, 0x02	; 2
    2b42:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    2b44:	a0 e4       	ldi	r26, 0x40	; 64
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e0 e4       	ldi	r30, 0x40	; 64
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	84 60       	ori	r24, 0x04	; 4
    2b50:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
    2b52:	aa e2       	ldi	r26, 0x2A	; 42
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ea e2       	ldi	r30, 0x2A	; 42
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	84 60       	ori	r24, 0x04	; 4
    2b5e:	8c 93       	st	X, r24
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <UART_init+0x12e>

	}
	else
	{
		UCSRC|=(ConfigPtr->bit_data<<1);
    2b62:	a0 e4       	ldi	r26, 0x40	; 64
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e0 e4       	ldi	r30, 0x40	; 64
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b70:	fc 81       	ldd	r31, Y+4	; 0x04
    2b72:	80 81       	ld	r24, Z
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	82 2b       	or	r24, r18
    2b7e:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (ConfigPtr->baud_rate * 8UL))) - 1);
    2b80:	eb 81       	ldd	r30, Y+3	; 0x03
    2b82:	fc 81       	ldd	r31, Y+4	; 0x04
    2b84:	83 81       	ldd	r24, Z+3	; 0x03
    2b86:	94 81       	ldd	r25, Z+4	; 0x04
    2b88:	a5 81       	ldd	r26, Z+5	; 0x05
    2b8a:	b6 81       	ldd	r27, Z+6	; 0x06
    2b8c:	88 0f       	add	r24, r24
    2b8e:	99 1f       	adc	r25, r25
    2b90:	aa 1f       	adc	r26, r26
    2b92:	bb 1f       	adc	r27, r27
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	aa 1f       	adc	r26, r26
    2b9a:	bb 1f       	adc	r27, r27
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	aa 1f       	adc	r26, r26
    2ba2:	bb 1f       	adc	r27, r27
    2ba4:	9c 01       	movw	r18, r24
    2ba6:	ad 01       	movw	r20, r26
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	92 e1       	ldi	r25, 0x12	; 18
    2bac:	aa e7       	ldi	r26, 0x7A	; 122
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__udivmodsi4>
    2bb8:	da 01       	movw	r26, r20
    2bba:	c9 01       	movw	r24, r18
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2bc2:	e0 e4       	ldi	r30, 0x40	; 64
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	89 2f       	mov	r24, r25
    2bcc:	99 27       	eor	r25, r25
    2bce:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2bd0:	e9 e2       	ldi	r30, 0x29	; 41
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	80 83       	st	Z, r24
}
    2bd8:	0f 90       	pop	r0
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	08 95       	ret

00002be6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2be6:	df 93       	push	r29
    2be8:	cf 93       	push	r28
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bf2:	eb e2       	ldi	r30, 0x2B	; 43
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	80 72       	andi	r24, 0x20	; 32
    2bfe:	90 70       	andi	r25, 0x00	; 0
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	b9 f3       	breq	.-18     	; 0x2bf2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c04:	ec e2       	ldi	r30, 0x2C	; 44
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c1c:	eb e2       	ldi	r30, 0x2B	; 43
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	88 23       	and	r24, r24
    2c24:	dc f7       	brge	.-10     	; 0x2c1c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c26:	ec e2       	ldi	r30, 0x2C	; 44
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
}
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <UART_sendString+0x6>
    2c38:	0f 92       	push	r0
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	9b 83       	std	Y+3, r25	; 0x03
    2c40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c42:	19 82       	std	Y+1, r1	; 0x01
    2c44:	0e c0       	rjmp	.+28     	; 0x2c62 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c50:	fc 01       	movw	r30, r24
    2c52:	e2 0f       	add	r30, r18
    2c54:	f3 1f       	adc	r31, r19
    2c56:	80 81       	ld	r24, Z
    2c58:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <UART_sendByte>
		i++;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	8f 5f       	subi	r24, 0xFF	; 255
    2c60:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c62:	89 81       	ldd	r24, Y+1	; 0x01
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	80 81       	ld	r24, Z
    2c74:	88 23       	and	r24, r24
    2c76:	39 f7       	brne	.-50     	; 0x2c46 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c84:	0f 93       	push	r16
    2c86:	1f 93       	push	r17
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <UART_receiveString+0xa>
    2c8e:	0f 92       	push	r0
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	9b 83       	std	Y+3, r25	; 0x03
    2c96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c98:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	8c 01       	movw	r16, r24
    2ca6:	02 0f       	add	r16, r18
    2ca8:	13 1f       	adc	r17, r19
    2caa:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    2cae:	f8 01       	movw	r30, r16
    2cb0:	80 83       	st	Z, r24
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	8f 5f       	subi	r24, 0xFF	; 255
    2cb8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	8c 01       	movw	r16, r24
    2cc6:	02 0f       	add	r16, r18
    2cc8:	13 1f       	adc	r17, r19
    2cca:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <UART_recieveByte>
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	fc 01       	movw	r30, r24
    2cde:	e2 0f       	add	r30, r18
    2ce0:	f3 1f       	adc	r31, r19
    2ce2:	80 81       	ld	r24, Z
    2ce4:	83 32       	cpi	r24, 0x23	; 35
    2ce6:	31 f7       	brne	.-52     	; 0x2cb4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	10 82       	st	Z, r1
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	08 95       	ret

00002d0a <__udivmodsi4>:
    2d0a:	a1 e2       	ldi	r26, 0x21	; 33
    2d0c:	1a 2e       	mov	r1, r26
    2d0e:	aa 1b       	sub	r26, r26
    2d10:	bb 1b       	sub	r27, r27
    2d12:	fd 01       	movw	r30, r26
    2d14:	0d c0       	rjmp	.+26     	; 0x2d30 <__udivmodsi4_ep>

00002d16 <__udivmodsi4_loop>:
    2d16:	aa 1f       	adc	r26, r26
    2d18:	bb 1f       	adc	r27, r27
    2d1a:	ee 1f       	adc	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	a2 17       	cp	r26, r18
    2d20:	b3 07       	cpc	r27, r19
    2d22:	e4 07       	cpc	r30, r20
    2d24:	f5 07       	cpc	r31, r21
    2d26:	20 f0       	brcs	.+8      	; 0x2d30 <__udivmodsi4_ep>
    2d28:	a2 1b       	sub	r26, r18
    2d2a:	b3 0b       	sbc	r27, r19
    2d2c:	e4 0b       	sbc	r30, r20
    2d2e:	f5 0b       	sbc	r31, r21

00002d30 <__udivmodsi4_ep>:
    2d30:	66 1f       	adc	r22, r22
    2d32:	77 1f       	adc	r23, r23
    2d34:	88 1f       	adc	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	1a 94       	dec	r1
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <__udivmodsi4_loop>
    2d3c:	60 95       	com	r22
    2d3e:	70 95       	com	r23
    2d40:	80 95       	com	r24
    2d42:	90 95       	com	r25
    2d44:	9b 01       	movw	r18, r22
    2d46:	ac 01       	movw	r20, r24
    2d48:	bd 01       	movw	r22, r26
    2d4a:	cf 01       	movw	r24, r30
    2d4c:	08 95       	ret

00002d4e <__prologue_saves__>:
    2d4e:	2f 92       	push	r2
    2d50:	3f 92       	push	r3
    2d52:	4f 92       	push	r4
    2d54:	5f 92       	push	r5
    2d56:	6f 92       	push	r6
    2d58:	7f 92       	push	r7
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	ca 1b       	sub	r28, r26
    2d78:	db 0b       	sbc	r29, r27
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	09 94       	ijmp

00002d86 <__epilogue_restores__>:
    2d86:	2a 88       	ldd	r2, Y+18	; 0x12
    2d88:	39 88       	ldd	r3, Y+17	; 0x11
    2d8a:	48 88       	ldd	r4, Y+16	; 0x10
    2d8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d90:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d92:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d94:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d96:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d98:	b9 84       	ldd	r11, Y+9	; 0x09
    2d9a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9c:	df 80       	ldd	r13, Y+7	; 0x07
    2d9e:	ee 80       	ldd	r14, Y+6	; 0x06
    2da0:	fd 80       	ldd	r15, Y+5	; 0x05
    2da2:	0c 81       	ldd	r16, Y+4	; 0x04
    2da4:	1b 81       	ldd	r17, Y+3	; 0x03
    2da6:	aa 81       	ldd	r26, Y+2	; 0x02
    2da8:	b9 81       	ldd	r27, Y+1	; 0x01
    2daa:	ce 0f       	add	r28, r30
    2dac:	d1 1d       	adc	r29, r1
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	ed 01       	movw	r28, r26
    2dba:	08 95       	ret

00002dbc <itoa>:
    2dbc:	fb 01       	movw	r30, r22
    2dbe:	9f 01       	movw	r18, r30
    2dc0:	e8 94       	clt
    2dc2:	42 30       	cpi	r20, 0x02	; 2
    2dc4:	c4 f0       	brlt	.+48     	; 0x2df6 <itoa+0x3a>
    2dc6:	45 32       	cpi	r20, 0x25	; 37
    2dc8:	b4 f4       	brge	.+44     	; 0x2df6 <itoa+0x3a>
    2dca:	4a 30       	cpi	r20, 0x0A	; 10
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <itoa+0x1c>
    2dce:	97 fb       	bst	r25, 7
    2dd0:	1e f4       	brtc	.+6      	; 0x2dd8 <itoa+0x1c>
    2dd2:	90 95       	com	r25
    2dd4:	81 95       	neg	r24
    2dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd8:	64 2f       	mov	r22, r20
    2dda:	77 27       	eor	r23, r23
    2ddc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__udivmodhi4>
    2de0:	80 5d       	subi	r24, 0xD0	; 208
    2de2:	8a 33       	cpi	r24, 0x3A	; 58
    2de4:	0c f0       	brlt	.+2      	; 0x2de8 <itoa+0x2c>
    2de6:	89 5d       	subi	r24, 0xD9	; 217
    2de8:	81 93       	st	Z+, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	a1 f7       	brne	.-24     	; 0x2dd8 <itoa+0x1c>
    2df0:	16 f4       	brtc	.+4      	; 0x2df6 <itoa+0x3a>
    2df2:	5d e2       	ldi	r21, 0x2D	; 45
    2df4:	51 93       	st	Z+, r21
    2df6:	10 82       	st	Z, r1
    2df8:	c9 01       	movw	r24, r18
    2dfa:	0c 94 ff 16 	jmp	0x2dfe	; 0x2dfe <strrev>

00002dfe <strrev>:
    2dfe:	dc 01       	movw	r26, r24
    2e00:	fc 01       	movw	r30, r24
    2e02:	67 2f       	mov	r22, r23
    2e04:	71 91       	ld	r23, Z+
    2e06:	77 23       	and	r23, r23
    2e08:	e1 f7       	brne	.-8      	; 0x2e02 <strrev+0x4>
    2e0a:	32 97       	sbiw	r30, 0x02	; 2
    2e0c:	04 c0       	rjmp	.+8      	; 0x2e16 <strrev+0x18>
    2e0e:	7c 91       	ld	r23, X
    2e10:	6d 93       	st	X+, r22
    2e12:	70 83       	st	Z, r23
    2e14:	62 91       	ld	r22, -Z
    2e16:	ae 17       	cp	r26, r30
    2e18:	bf 07       	cpc	r27, r31
    2e1a:	c8 f3       	brcs	.-14     	; 0x2e0e <strrev+0x10>
    2e1c:	08 95       	ret

00002e1e <__udivmodhi4>:
    2e1e:	aa 1b       	sub	r26, r26
    2e20:	bb 1b       	sub	r27, r27
    2e22:	51 e1       	ldi	r21, 0x11	; 17
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <__udivmodhi4_ep>

00002e26 <__udivmodhi4_loop>:
    2e26:	aa 1f       	adc	r26, r26
    2e28:	bb 1f       	adc	r27, r27
    2e2a:	a6 17       	cp	r26, r22
    2e2c:	b7 07       	cpc	r27, r23
    2e2e:	10 f0       	brcs	.+4      	; 0x2e34 <__udivmodhi4_ep>
    2e30:	a6 1b       	sub	r26, r22
    2e32:	b7 0b       	sbc	r27, r23

00002e34 <__udivmodhi4_ep>:
    2e34:	88 1f       	adc	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	5a 95       	dec	r21
    2e3a:	a9 f7       	brne	.-22     	; 0x2e26 <__udivmodhi4_loop>
    2e3c:	80 95       	com	r24
    2e3e:	90 95       	com	r25
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	08 95       	ret

00002e46 <_exit>:
    2e46:	f8 94       	cli

00002e48 <__stop_program>:
    2e48:	ff cf       	rjmp	.-2      	; 0x2e48 <__stop_program>
